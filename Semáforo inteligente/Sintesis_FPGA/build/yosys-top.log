
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/johan/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)


-- Parsing `top.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Storing AST representation for module `$abstract\divFreqLCD'.
Storing AST representation for module `$abstract\FrecAntirebote'.
Storing AST representation for module `$abstract\antirebote'.
Storing AST representation for module `$abstract\divFreq'.
Storing AST representation for module `$abstract\DIG_Counter_Nbit'.
Storing AST representation for module `$abstract\DIG_Sub'.
Storing AST representation for module `$abstract\DIG_Add'.
Storing AST representation for module `$abstract\div'.
Storing AST representation for module `$abstract\Contador'.
Storing AST representation for module `$abstract\10_2'.
Storing AST representation for module `$abstract\CompUnsigned'.
Storing AST representation for module `$abstract\Mux_2x1_NBits'.
Storing AST representation for module `$abstract\Demux1'.
Storing AST representation for module `$abstract\Comparador'.
Storing AST representation for module `$abstract\Mux_8x1_NBits'.
Storing AST representation for module `$abstract\DIG_D_FF_1bit'.
Storing AST representation for module `$abstract\DIG_JK_FF'.
Storing AST representation for module `$abstract\FSM'.
Storing AST representation for module `$abstract\Semaforo_A'.
Storing AST representation for module `$abstract\Semaforo_B'.
Storing AST representation for module `$abstract\Semaforo_C'.
Storing AST representation for module `$abstract\Semaforo_D'.
Storing AST representation for module `$abstract\top'.
Storing AST representation for module `$abstract\LCD'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json build/top.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.
top.v:946: Warning: Identifier `\clk_count_lcd' is implicitly declared.

2.3.1. Analyzing design hierarchy..
Top module:  \top

2.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\LCD'.
Generating RTLIL representation for module `\LCD'.
Warning: reg '\en' is assigned in a continuous assignment at top.v:1160.12-1160.21.
Warning: reg '\rw' is assigned in a continuous assignment at top.v:1161.12-1161.18.

2.3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\div'.
Generating RTLIL representation for module `\div'.

2.3.4. Executing AST frontend in derive mode using pre-parsed AST for module `\divFreqLCD'.
Generating RTLIL representation for module `\divFreqLCD'.

2.3.5. Executing AST frontend in derive mode using pre-parsed AST for module `\Semaforo_D'.
Generating RTLIL representation for module `\Semaforo_D'.

2.3.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Semaforo_C'.
Generating RTLIL representation for module `\Semaforo_C'.

2.3.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Semaforo_B'.
Generating RTLIL representation for module `\Semaforo_B'.

2.3.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Semaforo_A'.
Generating RTLIL representation for module `\Semaforo_A'.

2.3.9. Executing AST frontend in derive mode using pre-parsed AST for module `\FSM'.
Generating RTLIL representation for module `\FSM'.

2.3.10. Executing AST frontend in derive mode using pre-parsed AST for module `\Comparador'.
Generating RTLIL representation for module `\Comparador'.

2.3.11. Executing AST frontend in derive mode using pre-parsed AST for module `\10_2'.
Generating RTLIL representation for module `\10_2'.

2.3.12. Executing AST frontend in derive mode using pre-parsed AST for module `\Contador'.
Generating RTLIL representation for module `\Contador'.

2.3.13. Executing AST frontend in derive mode using pre-parsed AST for module `\divFreq'.
Generating RTLIL representation for module `\divFreq'.

2.3.14. Executing AST frontend in derive mode using pre-parsed AST for module `\antirebote'.
Generating RTLIL representation for module `\antirebote'.

2.3.15. Executing AST frontend in derive mode using pre-parsed AST for module `\FrecAntirebote'.
Generating RTLIL representation for module `\FrecAntirebote'.

2.3.16. Analyzing design hierarchy..
Top module:  \top
Used module:     \LCD
Used module:     \div
Used module:     \divFreqLCD
Used module:     \Semaforo_D
Used module:     \Semaforo_C
Used module:     \Semaforo_B
Used module:     \Semaforo_A
Used module:     \FSM
Used module:     \Comparador
Used module:     \10_2
Used module:     \Contador
Used module:     \divFreq
Used module:     \antirebote
Used module:     \FrecAntirebote
Parameter \Bits = 6

2.3.17. Executing AST frontend in derive mode using pre-parsed AST for module `\DIG_Add'.
Parameter \Bits = 6
Generating RTLIL representation for module `$paramod\DIG_Add\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6

2.3.18. Executing AST frontend in derive mode using pre-parsed AST for module `\DIG_Sub'.
Parameter \Bits = 6
Generating RTLIL representation for module `$paramod\DIG_Sub\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6
Found cached RTLIL representation for module `$paramod\DIG_Sub\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6

2.3.19. Executing AST frontend in derive mode using pre-parsed AST for module `\DIG_Counter_Nbit'.
Parameter \Bits = 6
Generating RTLIL representation for module `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6
Found cached RTLIL representation for module `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6
Found cached RTLIL representation for module `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6
Found cached RTLIL representation for module `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 4

2.3.20. Executing AST frontend in derive mode using pre-parsed AST for module `\DIG_Counter_Nbit'.
Parameter \Bits = 4
Generating RTLIL representation for module `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100'.
Parameter \Default = 0

2.3.21. Executing AST frontend in derive mode using pre-parsed AST for module `\Demux1'.
Parameter \Default = 0
Generating RTLIL representation for module `$paramod\Demux1\Default=s32'00000000000000000000000000000000'.
Parameter \Default = 0
Found cached RTLIL representation for module `$paramod\Demux1\Default=s32'00000000000000000000000000000000'.
Parameter \Bits = 6

2.3.22. Executing AST frontend in derive mode using pre-parsed AST for module `\CompUnsigned'.
Parameter \Bits = 6
Generating RTLIL representation for module `$paramod\CompUnsigned\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6

2.3.23. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux_2x1_NBits'.
Parameter \Bits = 6
Generating RTLIL representation for module `$paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6
Found cached RTLIL representation for module `$paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6
Found cached RTLIL representation for module `$paramod\CompUnsigned\Bits=s32'00000000000000000000000000000110'.
Parameter \Bits = 6
Found cached RTLIL representation for module `$paramod\CompUnsigned\Bits=s32'00000000000000000000000000000110'.
Parameter \Default = 0

2.3.24. Executing AST frontend in derive mode using pre-parsed AST for module `\DIG_JK_FF'.
Parameter \Default = 0
Generating RTLIL representation for module `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000'.
Parameter \Default = 0
Found cached RTLIL representation for module `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000'.
Parameter \Default = 0

2.3.25. Executing AST frontend in derive mode using pre-parsed AST for module `\DIG_D_FF_1bit'.
Parameter \Default = 0
Generating RTLIL representation for module `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000'.
Parameter \Default = 0
Found cached RTLIL representation for module `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000'.

2.3.26. Analyzing design hierarchy..
Top module:  \top
Used module:     \LCD
Used module:     \div
Used module:     \divFreqLCD
Used module:     \Semaforo_D
Used module:     \Semaforo_C
Used module:     \Semaforo_B
Used module:     \Semaforo_A
Used module:     \FSM
Used module:         $paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000
Used module:         $paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000
Used module:     \Comparador
Used module:         $paramod\Demux1\Default=s32'00000000000000000000000000000000
Used module:         $paramod\CompUnsigned\Bits=s32'00000000000000000000000000000110
Used module:         $paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110
Used module:     \10_2
Used module:         $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100
Used module:     \Contador
Used module:         $paramod\DIG_Add\Bits=s32'00000000000000000000000000000110
Used module:         $paramod\DIG_Sub\Bits=s32'00000000000000000000000000000110
Used module:         $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110
Used module:     \divFreq
Used module:     \antirebote
Used module:     \FrecAntirebote

2.3.27. Analyzing design hierarchy..
Top module:  \top
Used module:     \LCD
Used module:     \div
Used module:     \divFreqLCD
Used module:     \Semaforo_D
Used module:     \Semaforo_C
Used module:     \Semaforo_B
Used module:     \Semaforo_A
Used module:     \FSM
Used module:         $paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000
Used module:         $paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000
Used module:     \Comparador
Used module:         $paramod\Demux1\Default=s32'00000000000000000000000000000000
Used module:         $paramod\CompUnsigned\Bits=s32'00000000000000000000000000000110
Used module:         $paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110
Used module:     \10_2
Used module:         $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100
Used module:     \Contador
Used module:         $paramod\DIG_Add\Bits=s32'00000000000000000000000000000110
Used module:         $paramod\DIG_Sub\Bits=s32'00000000000000000000000000000110
Used module:         $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110
Used module:     \divFreq
Used module:     \antirebote
Used module:     \FrecAntirebote
Removing unused module `$abstract\LCD'.
Removing unused module `$abstract\top'.
Removing unused module `$abstract\Semaforo_D'.
Removing unused module `$abstract\Semaforo_C'.
Removing unused module `$abstract\Semaforo_B'.
Removing unused module `$abstract\Semaforo_A'.
Removing unused module `$abstract\FSM'.
Removing unused module `$abstract\DIG_JK_FF'.
Removing unused module `$abstract\DIG_D_FF_1bit'.
Removing unused module `$abstract\Mux_8x1_NBits'.
Removing unused module `$abstract\Comparador'.
Removing unused module `$abstract\Demux1'.
Removing unused module `$abstract\Mux_2x1_NBits'.
Removing unused module `$abstract\CompUnsigned'.
Removing unused module `$abstract\10_2'.
Removing unused module `$abstract\Contador'.
Removing unused module `$abstract\div'.
Removing unused module `$abstract\DIG_Add'.
Removing unused module `$abstract\DIG_Sub'.
Removing unused module `$abstract\DIG_Counter_Nbit'.
Removing unused module `$abstract\divFreq'.
Removing unused module `$abstract\antirebote'.
Removing unused module `$abstract\FrecAntirebote'.
Removing unused module `$abstract\divFreqLCD'.
Removed 24 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174 in module SB_DFFSR.
Marked 2 switch rules as full_case in process $proc$top.v:572$731 in module $paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.
Removed 1 dead cases from process $proc$top.v:387$729 in module $paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.
Marked 1 switch rules as full_case in process $proc$top.v:387$729 in module $paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.
Marked 1 switch rules as full_case in process $proc$top.v:130$715 in module $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.
Marked 1 switch rules as full_case in process $proc$top.v:130$710 in module $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.
Marked 1 switch rules as full_case in process $proc$top.v:49$700 in module FrecAntirebote.
Marked 2 switch rules as full_case in process $proc$top.v:70$694 in module antirebote.
Marked 1 switch rules as full_case in process $proc$top.v:106$688 in module divFreq.
Marked 1 switch rules as full_case in process $proc$top.v:20$471 in module divFreqLCD.
Marked 6 switch rules as full_case in process $proc$top.v:200$452 in module div.
Marked 9 switch rules as full_case in process $proc$top.v:1103$394 in module LCD.
Marked 1 switch rules as full_case in process $proc$top.v:1098$390 in module LCD.
Removed a total of 1 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 11 redundant assignments.
Promoted 76 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$245'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$241'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$234'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$230'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$223'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$220'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$217'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$214'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$211'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$209'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$207'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$203'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$196'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$192'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$185'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$182'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$179'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$176'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$173'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$171'.
  Set init value: \Q = 1'0
Found init rule in `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.$proc$top.v:0$741'.
  Set init value: \state = 1'0
Found init rule in `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.$proc$top.v:0$738'.
  Set init value: \state = 1'0
Found init rule in `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.$proc$top.v:0$719'.
  Set init value: \count = 4'0000
Found init rule in `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.$proc$top.v:0$714'.
  Set init value: \count = 6'000000
Found init rule in `\FrecAntirebote.$proc$top.v:46$705'.
  Set init value: \count = 17'00000000000000000
Found init rule in `\FrecAntirebote.$proc$top.v:0$704'.
  Set init value: \CLK_OUT = 1'0
Found init rule in `\antirebote.$proc$top.v:68$699'.
  Set init value: \button_state = 1'0
Found init rule in `\antirebote.$proc$top.v:67$698'.
  Set init value: \count = 3'000
Found init rule in `\divFreq.$proc$top.v:103$693'.
  Set init value: \count = 24'000000000000000000000000
Found init rule in `\divFreq.$proc$top.v:0$692'.
  Set init value: \CLK_OUT = 1'0
Found init rule in `\divFreqLCD.$proc$top.v:18$476'.
  Set init value: \count = 2'00
Found init rule in `\divFreqLCD.$proc$top.v:0$475'.
  Set init value: \CLK_OUT = 1'0
Found init rule in `\LCD.$proc$top.v:0$451'.
  Set init value: \dat = 8'00000000
  Set init value: \rs = 1'0
  Set init value: \counter = 16'0000000000000000
  Set init value: \current = 6'000000
  Set init value: \next = 6'000000
  Set init value: \clkR = 1'0

2.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
Found async reset \R in `\SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
Found async reset \S in `\SB_DFFNS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
Found async reset \R in `\SB_DFFNR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
Found async reset \S in `\SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
Found async reset \R in `\SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
Found async reset \S in `\SB_DFFS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
Found async reset \R in `\SB_DFFR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.

2.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Creating decoders for process `\SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Creating decoders for process `\SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Creating decoders for process `\SB_DFFNS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$220'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$217'.
Creating decoders for process `\SB_DFFNR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$214'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$211'.
Creating decoders for process `\SB_DFFNE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$209'.
Creating decoders for process `\SB_DFFN.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$208'.
Creating decoders for process `\SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$203'.
Creating decoders for process `\SB_DFFESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Creating decoders for process `\SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$192'.
Creating decoders for process `\SB_DFFESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$185'.
Creating decoders for process `\SB_DFFS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$182'.
Creating decoders for process `\SB_DFFSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$179'.
Creating decoders for process `\SB_DFFR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$176'.
Creating decoders for process `\SB_DFFSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$173'.
Creating decoders for process `\SB_DFFE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$171'.
Creating decoders for process `\SB_DFF.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$170'.
Creating decoders for process `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.$proc$top.v:0$741'.
Creating decoders for process `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.$proc$top.v:546$740'.
Creating decoders for process `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.$proc$top.v:0$738'.
Creating decoders for process `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.$proc$top.v:572$731'.
     1/1: $0\state[0:0]
Creating decoders for process `$paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.$proc$top.v:387$729'.
     1/1: $1\out[5:0]
Creating decoders for process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.$proc$top.v:0$719'.
Creating decoders for process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.$proc$top.v:130$715'.
     1/1: $0\count[3:0]
Creating decoders for process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.$proc$top.v:0$714'.
Creating decoders for process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.$proc$top.v:130$710'.
     1/1: $0\count[5:0]
Creating decoders for process `\FrecAntirebote.$proc$top.v:46$705'.
Creating decoders for process `\FrecAntirebote.$proc$top.v:0$704'.
Creating decoders for process `\FrecAntirebote.$proc$top.v:49$700'.
     1/2: $0\count[16:0]
     2/2: $0\CLK_OUT[0:0]
Creating decoders for process `\antirebote.$proc$top.v:68$699'.
Creating decoders for process `\antirebote.$proc$top.v:67$698'.
Creating decoders for process `\antirebote.$proc$top.v:70$694'.
     1/3: $0\button_state[0:0]
     2/3: $0\count[2:0]
     3/3: $0\button_out[0:0]
Creating decoders for process `\divFreq.$proc$top.v:103$693'.
Creating decoders for process `\divFreq.$proc$top.v:0$692'.
Creating decoders for process `\divFreq.$proc$top.v:106$688'.
     1/2: $0\count[23:0]
     2/2: $0\CLK_OUT[0:0]
Creating decoders for process `\divFreqLCD.$proc$top.v:18$476'.
Creating decoders for process `\divFreqLCD.$proc$top.v:0$475'.
Creating decoders for process `\divFreqLCD.$proc$top.v:20$471'.
     1/2: $0\count[1:0]
     2/2: $0\CLK_OUT[0:0]
Creating decoders for process `\div.$proc$top.v:200$452'.
     1/12: $6\dec_tens[3:0]
     2/12: $6\temp[5:0]
     3/12: $5\dec_tens[3:0]
     4/12: $5\temp[5:0]
     5/12: $4\dec_tens[3:0]
     6/12: $4\temp[5:0]
     7/12: $3\dec_tens[3:0]
     8/12: $3\temp[5:0]
     9/12: $2\dec_tens[3:0]
    10/12: $2\temp[5:0]
    11/12: $1\dec_tens[3:0]
    12/12: $1\temp[5:0]
Creating decoders for process `\LCD.$proc$top.v:0$451'.
Creating decoders for process `\LCD.$proc$top.v:1103$394'.
     1/11: $1\next[5:0]
     2/11: $1\bin_to_ascii$func$top.v:1112$389.$result[7:0]$447
     3/11: $1\bin_to_ascii$func$top.v:1111$388.$result[7:0]$442
     4/11: $1\bin_to_ascii$func$top.v:1110$387.$result[7:0]$437
     5/11: $1\bin_to_ascii$func$top.v:1109$386.$result[7:0]$432
     6/11: $1\bin_to_ascii$func$top.v:1108$385.$result[7:0]$427
     7/11: $1\bin_to_ascii$func$top.v:1107$384.$result[7:0]$422
     8/11: $1\bin_to_ascii$func$top.v:1106$383.$result[7:0]$417
     9/11: $1\bin_to_ascii$func$top.v:1105$382.$result[7:0]$412
    10/11: $0\rs[0:0]
    11/11: $0\dat[7:0]
Creating decoders for process `\LCD.$proc$top.v:1098$390'.
     1/1: $1\clkR[0:0]

2.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.\out' from process `$paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.$proc$top.v:387$729'.
No latch inferred for signal `\div.\D0' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\D1' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\A0' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\B0' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\C0' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\A1' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\B1' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\C1' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\i' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\temp' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\dec_tens' from process `\div.$proc$top.v:200$452'.
No latch inferred for signal `\div.\dec_ones' from process `\div.$proc$top.v:200$452'.

2.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
  created $adff cell `$procdff$1017' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
  created $dff cell `$procdff$1018' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
  created $adff cell `$procdff$1019' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
  created $dff cell `$procdff$1020' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
  created $adff cell `$procdff$1021' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
  created $dff cell `$procdff$1022' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
  created $adff cell `$procdff$1023' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
  created $dff cell `$procdff$1024' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
  created $dff cell `$procdff$1025' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$208'.
  created $dff cell `$procdff$1026' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
  created $adff cell `$procdff$1027' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
  created $dff cell `$procdff$1028' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
  created $adff cell `$procdff$1029' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
  created $dff cell `$procdff$1030' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
  created $adff cell `$procdff$1031' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
  created $dff cell `$procdff$1032' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.
  created $adff cell `$procdff$1033' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
  created $dff cell `$procdff$1034' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
  created $dff cell `$procdff$1035' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$170'.
  created $dff cell `$procdff$1036' with positive edge clock.
Creating register for signal `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.\state' using process `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.$proc$top.v:546$740'.
  created $dff cell `$procdff$1037' with positive edge clock.
Creating register for signal `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.\state' using process `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.$proc$top.v:572$731'.
  created $dff cell `$procdff$1038' with positive edge clock.
Creating register for signal `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.\count' using process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.$proc$top.v:130$715'.
  created $dff cell `$procdff$1039' with positive edge clock.
Creating register for signal `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.\count' using process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.$proc$top.v:130$710'.
  created $dff cell `$procdff$1040' with positive edge clock.
Creating register for signal `\FrecAntirebote.\CLK_OUT' using process `\FrecAntirebote.$proc$top.v:49$700'.
  created $dff cell `$procdff$1041' with positive edge clock.
Creating register for signal `\FrecAntirebote.\count' using process `\FrecAntirebote.$proc$top.v:49$700'.
  created $dff cell `$procdff$1042' with positive edge clock.
Creating register for signal `\antirebote.\button_out' using process `\antirebote.$proc$top.v:70$694'.
  created $dff cell `$procdff$1043' with positive edge clock.
Creating register for signal `\antirebote.\count' using process `\antirebote.$proc$top.v:70$694'.
  created $dff cell `$procdff$1044' with positive edge clock.
Creating register for signal `\antirebote.\button_state' using process `\antirebote.$proc$top.v:70$694'.
  created $dff cell `$procdff$1045' with positive edge clock.
Creating register for signal `\divFreq.\CLK_OUT' using process `\divFreq.$proc$top.v:106$688'.
  created $dff cell `$procdff$1046' with positive edge clock.
Creating register for signal `\divFreq.\count' using process `\divFreq.$proc$top.v:106$688'.
  created $dff cell `$procdff$1047' with positive edge clock.
Creating register for signal `\divFreqLCD.\CLK_OUT' using process `\divFreqLCD.$proc$top.v:20$471'.
  created $dff cell `$procdff$1048' with positive edge clock.
Creating register for signal `\divFreqLCD.\count' using process `\divFreqLCD.$proc$top.v:20$471'.
  created $dff cell `$procdff$1049' with positive edge clock.
Creating register for signal `\LCD.\dat' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1050' with positive edge clock.
Creating register for signal `\LCD.\rs' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1051' with positive edge clock.
Creating register for signal `\LCD.\current' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1052' with positive edge clock.
Creating register for signal `\LCD.\next' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1053' with positive edge clock.
Creating register for signal `\LCD.\A1_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1054' with positive edge clock.
Creating register for signal `\LCD.\A0_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1055' with positive edge clock.
Creating register for signal `\LCD.\B1_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1056' with positive edge clock.
Creating register for signal `\LCD.\B0_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1057' with positive edge clock.
Creating register for signal `\LCD.\C1_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1058' with positive edge clock.
Creating register for signal `\LCD.\C0_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1059' with positive edge clock.
Creating register for signal `\LCD.\D1_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1060' with positive edge clock.
Creating register for signal `\LCD.\D0_ascii' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1061' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1105$382.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1062' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1105$382.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1063' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1106$383.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1064' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1106$383.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1065' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1107$384.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1066' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1107$384.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1067' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1108$385.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1068' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1108$385.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1069' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1109$386.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1070' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1109$386.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1071' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1110$387.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1072' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1110$387.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1073' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1111$388.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1074' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1111$388.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1075' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1112$389.$result' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1076' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$top.v:1112$389.bin' using process `\LCD.$proc$top.v:1103$394'.
  created $dff cell `$procdff$1077' with positive edge clock.
Creating register for signal `\LCD.\counter' using process `\LCD.$proc$top.v:1098$390'.
  created $dff cell `$procdff$1078' with positive edge clock.
Creating register for signal `\LCD.\clkR' using process `\LCD.$proc$top.v:1098$390'.
  created $dff cell `$procdff$1079' with positive edge clock.

2.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
Removing empty process `SB_DFFNES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
Removing empty process `SB_DFFNESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
Removing empty process `SB_DFFNESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
Removing empty process `SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
Removing empty process `SB_DFFNER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
Removing empty process `SB_DFFNESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
Removing empty process `SB_DFFNESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
Removing empty process `SB_DFFNS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Removing empty process `SB_DFFNS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
Removing empty process `SB_DFFNSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$220'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
Removing empty process `SB_DFFNSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
Removing empty process `SB_DFFNR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$217'.
Removing empty process `SB_DFFNR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
Removing empty process `SB_DFFNSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$214'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
Removing empty process `SB_DFFNSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
Removing empty process `SB_DFFNE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$211'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
Removing empty process `SB_DFFNE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
Removing empty process `SB_DFFN.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$209'.
Removing empty process `SB_DFFN.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$208'.
Removing empty process `SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
Removing empty process `SB_DFFES.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
Removing empty process `SB_DFFESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$203'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
Removing empty process `SB_DFFESS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
Removing empty process `SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
Removing empty process `SB_DFFER.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
Removing empty process `SB_DFFESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$192'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
Removing empty process `SB_DFFESR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
Removing empty process `SB_DFFS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$185'.
Removing empty process `SB_DFFS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
Removing empty process `SB_DFFSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$182'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
Removing empty process `SB_DFFSS.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
Removing empty process `SB_DFFR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$179'.
Removing empty process `SB_DFFR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.
Removing empty process `SB_DFFSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$176'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
Removing empty process `SB_DFFSR.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
Removing empty process `SB_DFFE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$173'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
Removing empty process `SB_DFFE.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
Removing empty process `SB_DFF.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$171'.
Removing empty process `SB_DFF.$proc$/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$170'.
Removing empty process `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.$proc$top.v:0$741'.
Removing empty process `$paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.$proc$top.v:546$740'.
Removing empty process `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.$proc$top.v:0$738'.
Found and cleaned up 3 empty switches in `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.$proc$top.v:572$731'.
Removing empty process `$paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.$proc$top.v:572$731'.
Found and cleaned up 1 empty switch in `$paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.$proc$top.v:387$729'.
Removing empty process `$paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.$proc$top.v:387$729'.
Removing empty process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.$proc$top.v:0$719'.
Found and cleaned up 2 empty switches in `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.$proc$top.v:130$715'.
Removing empty process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.$proc$top.v:130$715'.
Removing empty process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.$proc$top.v:0$714'.
Found and cleaned up 2 empty switches in `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.$proc$top.v:130$710'.
Removing empty process `$paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.$proc$top.v:130$710'.
Removing empty process `FrecAntirebote.$proc$top.v:46$705'.
Removing empty process `FrecAntirebote.$proc$top.v:0$704'.
Found and cleaned up 1 empty switch in `\FrecAntirebote.$proc$top.v:49$700'.
Removing empty process `FrecAntirebote.$proc$top.v:49$700'.
Removing empty process `antirebote.$proc$top.v:68$699'.
Removing empty process `antirebote.$proc$top.v:67$698'.
Found and cleaned up 2 empty switches in `\antirebote.$proc$top.v:70$694'.
Removing empty process `antirebote.$proc$top.v:70$694'.
Removing empty process `divFreq.$proc$top.v:103$693'.
Removing empty process `divFreq.$proc$top.v:0$692'.
Found and cleaned up 1 empty switch in `\divFreq.$proc$top.v:106$688'.
Removing empty process `divFreq.$proc$top.v:106$688'.
Removing empty process `divFreqLCD.$proc$top.v:18$476'.
Removing empty process `divFreqLCD.$proc$top.v:0$475'.
Found and cleaned up 1 empty switch in `\divFreqLCD.$proc$top.v:20$471'.
Removing empty process `divFreqLCD.$proc$top.v:20$471'.
Found and cleaned up 6 empty switches in `\div.$proc$top.v:200$452'.
Removing empty process `div.$proc$top.v:200$452'.
Removing empty process `LCD.$proc$top.v:0$451'.
Found and cleaned up 9 empty switches in `\LCD.$proc$top.v:1103$394'.
Removing empty process `LCD.$proc$top.v:1103$394'.
Found and cleaned up 1 empty switch in `\LCD.$proc$top.v:1098$390'.
Removing empty process `LCD.$proc$top.v:1098$390'.
Cleaned up 47 empty switches.

2.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.
Optimizing module $paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.
Optimizing module $paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.
Optimizing module $paramod\CompUnsigned\Bits=s32'00000000000000000000000000000110.
Optimizing module $paramod\Demux1\Default=s32'00000000000000000000000000000000.
Optimizing module $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.
Optimizing module $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.
Optimizing module $paramod\DIG_Sub\Bits=s32'00000000000000000000000000000110.
Optimizing module $paramod\DIG_Add\Bits=s32'00000000000000000000000000000110.
Optimizing module FrecAntirebote.
Optimizing module antirebote.
Optimizing module divFreq.
Optimizing module Contador.
Optimizing module \10_2.
Optimizing module Comparador.
Optimizing module FSM.
Optimizing module Semaforo_A.
Optimizing module Semaforo_B.
Optimizing module Semaforo_C.
Optimizing module Semaforo_D.
Optimizing module divFreqLCD.
Optimizing module div.
Optimizing module LCD.
Optimizing module top.

2.5. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\DIG_D_FF_1bit\Default=s32'00000000000000000000000000000000.
Deleting now unused module $paramod\DIG_JK_FF\Default=s32'00000000000000000000000000000000.
Deleting now unused module $paramod\Mux_2x1_NBits\Bits=s32'00000000000000000000000000000110.
Deleting now unused module $paramod\CompUnsigned\Bits=s32'00000000000000000000000000000110.
Deleting now unused module $paramod\Demux1\Default=s32'00000000000000000000000000000000.
Deleting now unused module $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\DIG_Counter_Nbit\Bits=s32'00000000000000000000000000000110.
Deleting now unused module $paramod\DIG_Sub\Bits=s32'00000000000000000000000000000110.
Deleting now unused module $paramod\DIG_Add\Bits=s32'00000000000000000000000000000110.
Deleting now unused module FrecAntirebote.
Deleting now unused module antirebote.
Deleting now unused module divFreq.
Deleting now unused module Contador.
Deleting now unused module \10_2.
Deleting now unused module Comparador.
Deleting now unused module FSM.
Deleting now unused module Semaforo_A.
Deleting now unused module Semaforo_B.
Deleting now unused module Semaforo_C.
Deleting now unused module Semaforo_D.
Deleting now unused module divFreqLCD.
Deleting now unused module div.
Deleting now unused module LCD.

2.6. Executing TRIBUF pass.

2.7. Executing DEMINOUT pass (demote inout ports to input or output).

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 184 unused cells and 991 unused wires.

2.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 119 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $flatten\lcd_inst.$procmux$878: { $flatten\lcd_inst.$procmux$1013_CMP $flatten\lcd_inst.$procmux$1012_CMP $auto$opt_reduce.cc:134:opt_pmux$1081 $flatten\lcd_inst.$procmux$1009_CMP $flatten\lcd_inst.$procmux$1008_CMP $flatten\lcd_inst.$procmux$1007_CMP $flatten\lcd_inst.$procmux$1006_CMP $flatten\lcd_inst.$procmux$1005_CMP $flatten\lcd_inst.$procmux$1004_CMP $flatten\lcd_inst.$procmux$1003_CMP $flatten\lcd_inst.$procmux$1002_CMP $flatten\lcd_inst.$procmux$1001_CMP $flatten\lcd_inst.$procmux$1000_CMP $flatten\lcd_inst.$procmux$899_CMP $flatten\lcd_inst.$procmux$898_CMP $flatten\lcd_inst.$procmux$897_CMP $flatten\lcd_inst.$procmux$896_CMP $flatten\lcd_inst.$procmux$895_CMP $flatten\lcd_inst.$procmux$894_CMP $flatten\lcd_inst.$procmux$893_CMP $flatten\lcd_inst.$procmux$892_CMP $flatten\lcd_inst.$procmux$891_CMP $flatten\lcd_inst.$procmux$890_CMP $flatten\lcd_inst.$procmux$889_CMP $flatten\lcd_inst.$procmux$888_CMP $flatten\lcd_inst.$procmux$887_CMP $flatten\lcd_inst.$procmux$886_CMP $flatten\lcd_inst.$procmux$885_CMP $flatten\lcd_inst.$procmux$884_CMP $flatten\lcd_inst.$procmux$883_CMP $flatten\lcd_inst.$procmux$882_CMP $flatten\lcd_inst.$procmux$881_CMP $flatten\lcd_inst.$procmux$880_CMP $flatten\lcd_inst.$procmux$879_CMP }
    New ctrl vector for $pmux cell $flatten\lcd_inst.$procmux$939: { $auto$opt_reduce.cc:134:opt_pmux$1085 $auto$opt_reduce.cc:134:opt_pmux$1083 }
    New ctrl vector for $pmux cell $flatten\lcd_inst.$procmux$977: { $auto$opt_reduce.cc:134:opt_pmux$1097 $flatten\lcd_inst.$procmux$1011_CMP $flatten\lcd_inst.$procmux$1010_CMP $flatten\lcd_inst.$procmux$1009_CMP $flatten\lcd_inst.$procmux$1005_CMP $flatten\lcd_inst.$procmux$1003_CMP $flatten\lcd_inst.$procmux$1002_CMP $flatten\lcd_inst.$procmux$897_CMP $flatten\lcd_inst.$procmux$895_CMP $flatten\lcd_inst.$procmux$894_CMP $flatten\lcd_inst.$procmux$893_CMP $flatten\lcd_inst.$procmux$889_CMP $flatten\lcd_inst.$procmux$887_CMP $flatten\lcd_inst.$procmux$886_CMP $auto$opt_reduce.cc:134:opt_pmux$1095 $auto$opt_reduce.cc:134:opt_pmux$1093 $auto$opt_reduce.cc:134:opt_pmux$1091 $auto$opt_reduce.cc:134:opt_pmux$1089 $flatten\lcd_inst.$procmux$881_CMP $auto$opt_reduce.cc:134:opt_pmux$1087 $flatten\lcd_inst.$procmux$879_CMP $flatten\lcd_inst.$procmux$940_CMP }
  Optimizing cells in module \top.
Performed a total of 3 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.6. Executing OPT_DFF pass (perform DFF optimizations).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 207 unused wires.

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.9. Rerunning OPT passes. (Maybe there is more to do..)

2.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.13. Executing OPT_DFF pass (perform DFF optimizations).

2.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.16. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.lcd_inst.next as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\lcd_inst.$procdff$1079 ($dff) from module top (D = $flatten\lcd_inst.$not$top.v:1100$393_Y, Q = \lcd_inst.clkR).
Adding EN signal on $flatten\lcd_inst.$procdff$1051 ($dff) from module top (D = $flatten\lcd_inst.$0\rs[0:0], Q = \lcd_inst.rs).
Adding EN signal on $flatten\lcd_inst.$procdff$1050 ($dff) from module top (D = $flatten\lcd_inst.$0\dat[7:0], Q = \lcd_inst.dat).
Adding EN signal on $flatten\debounce_Dpp.$procdff$1045 ($dff) from module top (D = \Dpp, Q = \debounce_Dpp.button_state).
Adding SRST signal on $flatten\debounce_Dpp.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Dpp.$procmux$817_Y, Q = \debounce_Dpp.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1106 ($sdff) from module top (D = $flatten\debounce_Dpp.$add$top.v:77$697_Y [2:0], Q = \debounce_Dpp.count).
Adding EN signal on $flatten\debounce_Dpp.$procdff$1043 ($dff) from module top (D = \debounce_Dpp.button_state, Q = \debounce_Dpp.button_out).
Adding EN signal on $flatten\debounce_Dp.$procdff$1045 ($dff) from module top (D = \Dp, Q = \debounce_Dp.button_state).
Adding SRST signal on $flatten\debounce_Dp.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Dp.$procmux$817_Y, Q = \debounce_Dp.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1116 ($sdff) from module top (D = $flatten\debounce_Dp.$add$top.v:77$697_Y [2:0], Q = \debounce_Dp.count).
Adding EN signal on $flatten\debounce_Dp.$procdff$1043 ($dff) from module top (D = \debounce_Dp.button_state, Q = \debounce_Dp.button_out).
Adding EN signal on $flatten\debounce_Dll.$procdff$1045 ($dff) from module top (D = \Dll, Q = \debounce_Dll.button_state).
Adding SRST signal on $flatten\debounce_Dll.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Dll.$procmux$817_Y, Q = \debounce_Dll.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1126 ($sdff) from module top (D = $flatten\debounce_Dll.$add$top.v:77$697_Y [2:0], Q = \debounce_Dll.count).
Adding EN signal on $flatten\debounce_Dll.$procdff$1043 ($dff) from module top (D = \debounce_Dll.button_state, Q = \debounce_Dll.button_out).
Adding EN signal on $flatten\debounce_Dl.$procdff$1045 ($dff) from module top (D = \Dl, Q = \debounce_Dl.button_state).
Adding SRST signal on $flatten\debounce_Dl.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Dl.$procmux$817_Y, Q = \debounce_Dl.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1136 ($sdff) from module top (D = $flatten\debounce_Dl.$add$top.v:77$697_Y [2:0], Q = \debounce_Dl.count).
Adding EN signal on $flatten\debounce_Dl.$procdff$1043 ($dff) from module top (D = \debounce_Dl.button_state, Q = \debounce_Dl.button_out).
Adding EN signal on $flatten\debounce_Cpp.$procdff$1045 ($dff) from module top (D = \Cpp, Q = \debounce_Cpp.button_state).
Adding SRST signal on $flatten\debounce_Cpp.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Cpp.$procmux$817_Y, Q = \debounce_Cpp.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1146 ($sdff) from module top (D = $flatten\debounce_Cpp.$add$top.v:77$697_Y [2:0], Q = \debounce_Cpp.count).
Adding EN signal on $flatten\debounce_Cpp.$procdff$1043 ($dff) from module top (D = \debounce_Cpp.button_state, Q = \debounce_Cpp.button_out).
Adding EN signal on $flatten\debounce_Cp.$procdff$1045 ($dff) from module top (D = \Cp, Q = \debounce_Cp.button_state).
Adding SRST signal on $flatten\debounce_Cp.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Cp.$procmux$817_Y, Q = \debounce_Cp.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1156 ($sdff) from module top (D = $flatten\debounce_Cp.$add$top.v:77$697_Y [2:0], Q = \debounce_Cp.count).
Adding EN signal on $flatten\debounce_Cp.$procdff$1043 ($dff) from module top (D = \debounce_Cp.button_state, Q = \debounce_Cp.button_out).
Adding EN signal on $flatten\debounce_Cll.$procdff$1045 ($dff) from module top (D = \Cll, Q = \debounce_Cll.button_state).
Adding SRST signal on $flatten\debounce_Cll.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Cll.$procmux$817_Y, Q = \debounce_Cll.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1166 ($sdff) from module top (D = $flatten\debounce_Cll.$add$top.v:77$697_Y [2:0], Q = \debounce_Cll.count).
Adding EN signal on $flatten\debounce_Cll.$procdff$1043 ($dff) from module top (D = \debounce_Cll.button_state, Q = \debounce_Cll.button_out).
Adding EN signal on $flatten\debounce_Cl.$procdff$1045 ($dff) from module top (D = \Cl, Q = \debounce_Cl.button_state).
Adding SRST signal on $flatten\debounce_Cl.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Cl.$procmux$817_Y, Q = \debounce_Cl.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1176 ($sdff) from module top (D = $flatten\debounce_Cl.$add$top.v:77$697_Y [2:0], Q = \debounce_Cl.count).
Adding EN signal on $flatten\debounce_Cl.$procdff$1043 ($dff) from module top (D = \debounce_Cl.button_state, Q = \debounce_Cl.button_out).
Adding EN signal on $flatten\debounce_Bpp.$procdff$1045 ($dff) from module top (D = \Bpp, Q = \debounce_Bpp.button_state).
Adding SRST signal on $flatten\debounce_Bpp.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Bpp.$procmux$817_Y, Q = \debounce_Bpp.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1186 ($sdff) from module top (D = $flatten\debounce_Bpp.$add$top.v:77$697_Y [2:0], Q = \debounce_Bpp.count).
Adding EN signal on $flatten\debounce_Bpp.$procdff$1043 ($dff) from module top (D = \debounce_Bpp.button_state, Q = \debounce_Bpp.button_out).
Adding EN signal on $flatten\debounce_Bp.$procdff$1045 ($dff) from module top (D = \Bp, Q = \debounce_Bp.button_state).
Adding SRST signal on $flatten\debounce_Bp.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Bp.$procmux$817_Y, Q = \debounce_Bp.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1196 ($sdff) from module top (D = $flatten\debounce_Bp.$add$top.v:77$697_Y [2:0], Q = \debounce_Bp.count).
Adding EN signal on $flatten\debounce_Bp.$procdff$1043 ($dff) from module top (D = \debounce_Bp.button_state, Q = \debounce_Bp.button_out).
Adding EN signal on $flatten\debounce_Bll.$procdff$1045 ($dff) from module top (D = \Bll, Q = \debounce_Bll.button_state).
Adding SRST signal on $flatten\debounce_Bll.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Bll.$procmux$817_Y, Q = \debounce_Bll.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1206 ($sdff) from module top (D = $flatten\debounce_Bll.$add$top.v:77$697_Y [2:0], Q = \debounce_Bll.count).
Adding EN signal on $flatten\debounce_Bll.$procdff$1043 ($dff) from module top (D = \debounce_Bll.button_state, Q = \debounce_Bll.button_out).
Adding EN signal on $flatten\debounce_Bl.$procdff$1045 ($dff) from module top (D = \Bl, Q = \debounce_Bl.button_state).
Adding SRST signal on $flatten\debounce_Bl.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Bl.$procmux$817_Y, Q = \debounce_Bl.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1216 ($sdff) from module top (D = $flatten\debounce_Bl.$add$top.v:77$697_Y [2:0], Q = \debounce_Bl.count).
Adding EN signal on $flatten\debounce_Bl.$procdff$1043 ($dff) from module top (D = \debounce_Bl.button_state, Q = \debounce_Bl.button_out).
Adding EN signal on $flatten\debounce_App.$procdff$1045 ($dff) from module top (D = \App, Q = \debounce_App.button_state).
Adding SRST signal on $flatten\debounce_App.$procdff$1044 ($dff) from module top (D = $flatten\debounce_App.$procmux$817_Y, Q = \debounce_App.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1226 ($sdff) from module top (D = $flatten\debounce_App.$add$top.v:77$697_Y [2:0], Q = \debounce_App.count).
Adding EN signal on $flatten\debounce_App.$procdff$1043 ($dff) from module top (D = \debounce_App.button_state, Q = \debounce_App.button_out).
Adding EN signal on $flatten\debounce_Ap.$procdff$1045 ($dff) from module top (D = \Ap, Q = \debounce_Ap.button_state).
Adding SRST signal on $flatten\debounce_Ap.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Ap.$procmux$817_Y, Q = \debounce_Ap.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1236 ($sdff) from module top (D = $flatten\debounce_Ap.$add$top.v:77$697_Y [2:0], Q = \debounce_Ap.count).
Adding EN signal on $flatten\debounce_Ap.$procdff$1043 ($dff) from module top (D = \debounce_Ap.button_state, Q = \debounce_Ap.button_out).
Adding EN signal on $flatten\debounce_All.$procdff$1045 ($dff) from module top (D = \All, Q = \debounce_All.button_state).
Adding SRST signal on $flatten\debounce_All.$procdff$1044 ($dff) from module top (D = $flatten\debounce_All.$procmux$817_Y, Q = \debounce_All.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1246 ($sdff) from module top (D = $flatten\debounce_All.$add$top.v:77$697_Y [2:0], Q = \debounce_All.count).
Adding EN signal on $flatten\debounce_All.$procdff$1043 ($dff) from module top (D = \debounce_All.button_state, Q = \debounce_All.button_out).
Adding EN signal on $flatten\debounce_Al.$procdff$1045 ($dff) from module top (D = \Al, Q = \debounce_Al.button_state).
Adding SRST signal on $flatten\debounce_Al.$procdff$1044 ($dff) from module top (D = $flatten\debounce_Al.$procmux$817_Y, Q = \debounce_Al.count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1256 ($sdff) from module top (D = $flatten\debounce_Al.$add$top.v:77$697_Y [2:0], Q = \debounce_Al.count).
Adding EN signal on $flatten\debounce_Al.$procdff$1043 ($dff) from module top (D = \debounce_Al.button_state, Q = \debounce_Al.button_out).
Adding SRST signal on $flatten\clk3.$procdff$1042 ($dff) from module top (D = $flatten\clk3.$add$top.v:54$703_Y [16:0], Q = \clk3.count, rval = 17'00000000000000000).
Adding EN signal on $flatten\clk3.$procdff$1041 ($dff) from module top (D = $flatten\clk3.$not$top.v:52$702_Y, Q = \clk3.CLK_OUT).
Adding SRST signal on $flatten\clk2.$procdff$1049 ($dff) from module top (D = $flatten\clk2.$add$top.v:25$474_Y [1:0], Q = \clk2.count, rval = 2'00).
Adding EN signal on $flatten\clk2.$procdff$1048 ($dff) from module top (D = $flatten\clk2.$not$top.v:23$473_Y, Q = \clk2.CLK_OUT).
Adding SRST signal on $flatten\clk1.$procdff$1047 ($dff) from module top (D = $flatten\clk1.$add$top.v:111$691_Y [23:0], Q = \clk1.count, rval = 24'000000000000000000000000).
Adding EN signal on $flatten\clk1.$procdff$1046 ($dff) from module top (D = $flatten\clk1.$not$top.v:109$690_Y, Q = \clk1.CLK_OUT).
Adding SRST signal on $flatten\FSM_i7.\DIG_JK_FF_i3.$procdff$1038 ($dff) from module top (D = $flatten\FSM_i7.\DIG_JK_FF_i3.$procmux$789_Y, Q = \FSM_i7.DIG_JK_FF_i3.state, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1271 ($sdff) from module top (D = $flatten\FSM_i7.\DIG_JK_FF_i3.$procmux$789_Y, Q = \FSM_i7.DIG_JK_FF_i3.state).
Adding SRST signal on $flatten\FSM_i7.\DIG_JK_FF_i2.$procdff$1038 ($dff) from module top (D = $flatten\FSM_i7.\DIG_JK_FF_i2.$procmux$789_Y, Q = \FSM_i7.DIG_JK_FF_i2.state, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1275 ($sdff) from module top (D = $flatten\FSM_i7.\DIG_JK_FF_i2.$procmux$789_Y, Q = \FSM_i7.DIG_JK_FF_i2.state).
Adding EN signal on $flatten\Contador_i3.\DIG_Counter_Nbit_i3.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i3.\DIG_Counter_Nbit_i3.$add$top.v:134$711_Y, Q = \Contador_i3.DIG_Counter_Nbit_i3.count).
Adding EN signal on $flatten\Contador_i3.\DIG_Counter_Nbit_i2.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i3.\DIG_Counter_Nbit_i2.$add$top.v:134$711_Y, Q = \Contador_i3.DIG_Counter_Nbit_i2.count).
Adding EN signal on $flatten\Contador_i3.\DIG_Counter_Nbit_i1.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i3.\DIG_Counter_Nbit_i1.$add$top.v:134$711_Y, Q = \Contador_i3.DIG_Counter_Nbit_i1.count).
Adding EN signal on $flatten\Contador_i3.\DIG_Counter_Nbit_i0.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i3.\DIG_Counter_Nbit_i0.$add$top.v:134$711_Y, Q = \Contador_i3.DIG_Counter_Nbit_i0.count).
Adding EN signal on $flatten\Contador_i2.\DIG_Counter_Nbit_i3.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i2.\DIG_Counter_Nbit_i3.$add$top.v:134$711_Y, Q = \Contador_i2.DIG_Counter_Nbit_i3.count).
Adding EN signal on $flatten\Contador_i2.\DIG_Counter_Nbit_i2.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i2.\DIG_Counter_Nbit_i2.$add$top.v:134$711_Y, Q = \Contador_i2.DIG_Counter_Nbit_i2.count).
Adding EN signal on $flatten\Contador_i2.\DIG_Counter_Nbit_i1.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i2.\DIG_Counter_Nbit_i1.$add$top.v:134$711_Y, Q = \Contador_i2.DIG_Counter_Nbit_i1.count).
Adding EN signal on $flatten\Contador_i2.\DIG_Counter_Nbit_i0.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i2.\DIG_Counter_Nbit_i0.$add$top.v:134$711_Y, Q = \Contador_i2.DIG_Counter_Nbit_i0.count).
Adding EN signal on $flatten\Contador_i1.\DIG_Counter_Nbit_i3.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i1.\DIG_Counter_Nbit_i3.$add$top.v:134$711_Y, Q = \Contador_i1.DIG_Counter_Nbit_i3.count).
Adding EN signal on $flatten\Contador_i1.\DIG_Counter_Nbit_i2.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i1.\DIG_Counter_Nbit_i2.$add$top.v:134$711_Y, Q = \Contador_i1.DIG_Counter_Nbit_i2.count).
Adding EN signal on $flatten\Contador_i1.\DIG_Counter_Nbit_i1.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i1.\DIG_Counter_Nbit_i1.$add$top.v:134$711_Y, Q = \Contador_i1.DIG_Counter_Nbit_i1.count).
Adding EN signal on $flatten\Contador_i1.\DIG_Counter_Nbit_i0.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i1.\DIG_Counter_Nbit_i0.$add$top.v:134$711_Y, Q = \Contador_i1.DIG_Counter_Nbit_i0.count).
Adding EN signal on $flatten\Contador_i0.\DIG_Counter_Nbit_i3.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i0.\DIG_Counter_Nbit_i3.$add$top.v:134$711_Y, Q = \Contador_i0.DIG_Counter_Nbit_i3.count).
Adding EN signal on $flatten\Contador_i0.\DIG_Counter_Nbit_i2.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i0.\DIG_Counter_Nbit_i2.$add$top.v:134$711_Y, Q = \Contador_i0.DIG_Counter_Nbit_i2.count).
Adding EN signal on $flatten\Contador_i0.\DIG_Counter_Nbit_i1.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i0.\DIG_Counter_Nbit_i1.$add$top.v:134$711_Y, Q = \Contador_i0.DIG_Counter_Nbit_i1.count).
Adding EN signal on $flatten\Contador_i0.\DIG_Counter_Nbit_i0.$procdff$1040 ($dff) from module top (D = $flatten\Contador_i0.\DIG_Counter_Nbit_i0.$add$top.v:134$711_Y, Q = \Contador_i0.DIG_Counter_Nbit_i0.count).
Adding SRST signal on $flatten\10_2_i4.\DIG_Counter_Nbit_i0.$procdff$1039 ($dff) from module top (D = $flatten\10_2_i4.\DIG_Counter_Nbit_i0.$add$top.v:134$716_Y, Q = \10_2_i4.DIG_Counter_Nbit_i0.count, rval = 4'0000).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 106 unused cells and 106 unused wires.

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_DFF pass (perform DFF optimizations).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$flatten\clk3.$add$top.v:54$703 ($add).
Removed top 15 bits (of 32) from port Y of cell top.$flatten\clk3.$add$top.v:54$703 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_App.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_App.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_App.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Ap.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Ap.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Ap.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Al.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Al.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Al.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_All.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_All.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_All.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Bpp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Bpp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Bpp.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Bp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Bp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Bp.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Bl.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Bl.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Bl.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Bll.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Bll.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Bll.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Cpp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Cpp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Cpp.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Cp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Cp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Cp.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Cl.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Cl.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Cl.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Cll.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Cll.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Cll.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Dpp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Dpp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Dpp.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Dp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Dp.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Dp.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Dl.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Dl.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Dl.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\debounce_Dll.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$flatten\debounce_Dll.$add$top.v:77$697 ($add).
Removed top 29 bits (of 32) from port B of cell top.$flatten\debounce_Dll.$lt$top.v:75$696 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$flatten\clk1.$add$top.v:111$691 ($add).
Removed top 8 bits (of 32) from port Y of cell top.$flatten\clk1.$add$top.v:111$691 ($add).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i0.\DIG_Add_i6.$add$top.v:177$706 ($add).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i0.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i0.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i1.\DIG_Add_i6.$add$top.v:177$706 ($add).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i1.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i1.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i2.\DIG_Add_i6.$add$top.v:177$706 ($add).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i2.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i2.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i3.\DIG_Add_i6.$add$top.v:177$706 ($add).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i3.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
Removed top 1 bits (of 7) from port Y of cell top.$flatten\Contador_i3.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
Removed top 31 bits (of 32) from mux cell top.$flatten\Comparador_i5.\Demux1_i6.$ternary$top.v:408$722 ($mux).
Removed top 31 bits (of 32) from mux cell top.$flatten\Comparador_i5.\Demux1_i6.$ternary$top.v:409$725 ($mux).
Removed top 31 bits (of 32) from mux cell top.$flatten\Comparador_i5.\Demux1_i5.$ternary$top.v:408$722 ($mux).
Removed top 31 bits (of 32) from mux cell top.$flatten\Comparador_i5.\Demux1_i5.$ternary$top.v:409$725 ($mux).
Removed top 31 bits (of 32) from port B of cell top.$flatten\clk2.$add$top.v:25$474 ($add).
Removed top 30 bits (of 32) from port Y of cell top.$flatten\clk2.$add$top.v:25$474 ($add).
Removed top 3 bits (of 4) from mux cell top.$flatten\divA.$procmux$871 ($mux).
Removed top 2 bits (of 6) from mux cell top.$flatten\divA.$procmux$844 ($mux).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divA.$add$top.v:209$470 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\divA.$sub$top.v:208$469 ($sub).
Removed top 2 bits (of 6) from port A of cell top.$flatten\divA.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$ge$top.v:207$468 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divA.$add$top.v:209$467 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$sub$top.v:208$466 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divA.$sub$top.v:208$466 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$ge$top.v:207$465 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divA.$add$top.v:209$464 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$sub$top.v:208$463 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divA.$sub$top.v:208$463 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$ge$top.v:207$462 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divA.$add$top.v:209$461 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$sub$top.v:208$460 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divA.$sub$top.v:208$460 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$ge$top.v:207$459 ($ge).
Removed top 3 bits (of 4) from port A of cell top.$flatten\divA.$add$top.v:209$458 ($add).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divA.$add$top.v:209$458 ($add).
Removed top 2 bits (of 4) from port Y of cell top.$flatten\divA.$add$top.v:209$458 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$sub$top.v:208$457 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divA.$sub$top.v:208$457 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$ge$top.v:207$456 ($ge).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$sub$top.v:208$454 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divA.$sub$top.v:208$454 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divA.$ge$top.v:207$453 ($ge).
Removed top 3 bits (of 4) from mux cell top.$flatten\divB.$procmux$871 ($mux).
Removed top 2 bits (of 6) from mux cell top.$flatten\divB.$procmux$844 ($mux).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divB.$add$top.v:209$470 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\divB.$sub$top.v:208$469 ($sub).
Removed top 2 bits (of 6) from port A of cell top.$flatten\divB.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$ge$top.v:207$468 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divB.$add$top.v:209$467 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$sub$top.v:208$466 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divB.$sub$top.v:208$466 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$ge$top.v:207$465 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divB.$add$top.v:209$464 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$sub$top.v:208$463 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divB.$sub$top.v:208$463 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$ge$top.v:207$462 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divB.$add$top.v:209$461 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$sub$top.v:208$460 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divB.$sub$top.v:208$460 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$ge$top.v:207$459 ($ge).
Removed top 3 bits (of 4) from port A of cell top.$flatten\divB.$add$top.v:209$458 ($add).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divB.$add$top.v:209$458 ($add).
Removed top 2 bits (of 4) from port Y of cell top.$flatten\divB.$add$top.v:209$458 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$sub$top.v:208$457 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divB.$sub$top.v:208$457 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$ge$top.v:207$456 ($ge).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$sub$top.v:208$454 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divB.$sub$top.v:208$454 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divB.$ge$top.v:207$453 ($ge).
Removed top 3 bits (of 4) from mux cell top.$flatten\divC.$procmux$871 ($mux).
Removed top 2 bits (of 6) from mux cell top.$flatten\divC.$procmux$844 ($mux).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divC.$add$top.v:209$470 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\divC.$sub$top.v:208$469 ($sub).
Removed top 2 bits (of 6) from port A of cell top.$flatten\divC.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$ge$top.v:207$468 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divC.$add$top.v:209$467 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$sub$top.v:208$466 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divC.$sub$top.v:208$466 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$ge$top.v:207$465 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divC.$add$top.v:209$464 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$sub$top.v:208$463 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divC.$sub$top.v:208$463 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$ge$top.v:207$462 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divC.$add$top.v:209$461 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$sub$top.v:208$460 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divC.$sub$top.v:208$460 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$ge$top.v:207$459 ($ge).
Removed top 3 bits (of 4) from port A of cell top.$flatten\divC.$add$top.v:209$458 ($add).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divC.$add$top.v:209$458 ($add).
Removed top 2 bits (of 4) from port Y of cell top.$flatten\divC.$add$top.v:209$458 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$sub$top.v:208$457 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divC.$sub$top.v:208$457 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$ge$top.v:207$456 ($ge).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$sub$top.v:208$454 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divC.$sub$top.v:208$454 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divC.$ge$top.v:207$453 ($ge).
Removed top 3 bits (of 4) from mux cell top.$flatten\divD.$procmux$871 ($mux).
Removed top 2 bits (of 6) from mux cell top.$flatten\divD.$procmux$844 ($mux).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divD.$add$top.v:209$470 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port Y of cell top.$flatten\divD.$sub$top.v:208$469 ($sub).
Removed top 2 bits (of 6) from port A of cell top.$flatten\divD.$sub$top.v:208$469 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$ge$top.v:207$468 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divD.$add$top.v:209$467 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$sub$top.v:208$466 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divD.$sub$top.v:208$466 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$ge$top.v:207$465 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divD.$add$top.v:209$464 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$sub$top.v:208$463 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divD.$sub$top.v:208$463 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$ge$top.v:207$462 ($ge).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divD.$add$top.v:209$461 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$sub$top.v:208$460 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divD.$sub$top.v:208$460 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$ge$top.v:207$459 ($ge).
Removed top 3 bits (of 4) from port A of cell top.$flatten\divD.$add$top.v:209$458 ($add).
Removed top 3 bits (of 4) from port B of cell top.$flatten\divD.$add$top.v:209$458 ($add).
Removed top 2 bits (of 4) from port Y of cell top.$flatten\divD.$add$top.v:209$458 ($add).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$sub$top.v:208$457 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divD.$sub$top.v:208$457 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$ge$top.v:207$456 ($ge).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$sub$top.v:208$454 ($sub).
Removed top 26 bits (of 32) from port Y of cell top.$flatten\divD.$sub$top.v:208$454 ($sub).
Removed top 28 bits (of 32) from port B of cell top.$flatten\divD.$ge$top.v:207$453 ($ge).
Removed top 5 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1012_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1011_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1010_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1009_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1008_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1007_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1006_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1005_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1004_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1003_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1002_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1001_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$1000_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$899_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$898_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$897_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$896_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$895_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$894_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$893_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$892_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$891_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$890_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$889_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$888_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$887_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$886_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$885_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$884_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$883_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell top.$flatten\lcd_inst.$procmux$882_CMP0 ($eq).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$450 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$449 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$448 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$448 ($add).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$445 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$444 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$443 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$443 ($add).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$440 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$439 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$438 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$438 ($add).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$435 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$434 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$433 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$433 ($add).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$430 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$429 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$428 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$428 ($add).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$425 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$424 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$423 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$423 ($add).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$420 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$419 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$418 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$418 ($add).
Removed top 1 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1085$415 ($add).
Removed top 3 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$sub$top.v:1085$414 ($sub).
Removed top 2 bits (of 8) from port A of cell top.$flatten\lcd_inst.$add$top.v:1083$413 ($add).
Removed top 1 bits (of 8) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1083$413 ($add).
Removed top 31 bits (of 32) from port B of cell top.$flatten\lcd_inst.$add$top.v:1099$391 ($add).
Removed top 16 bits (of 32) from port Y of cell top.$flatten\lcd_inst.$add$top.v:1099$391 ($add).
Removed top 8 bits (of 32) from wire top.$flatten\clk1.$add$top.v:111$691_Y.
Removed top 30 bits (of 32) from wire top.$flatten\clk2.$add$top.v:25$474_Y.
Removed top 15 bits (of 32) from wire top.$flatten\clk3.$add$top.v:54$703_Y.
Removed top 29 bits (of 32) from wire top.$flatten\debounce_Al.$add$top.v:77$697_Y.
Removed top 29 bits (of 32) from wire top.$flatten\debounce_Ap.$add$top.v:77$697_Y.
Removed top 29 bits (of 32) from wire top.$flatten\debounce_App.$add$top.v:77$697_Y.
Removed top 29 bits (of 32) from wire top.$flatten\debounce_Bll.$add$top.v:77$697_Y.
Removed top 29 bits (of 32) from wire top.$flatten\debounce_Cl.$add$top.v:77$697_Y.
Removed top 29 bits (of 32) from wire top.$flatten\debounce_Cp.$add$top.v:77$697_Y.
Removed top 29 bits (of 32) from wire top.$flatten\debounce_Cpp.$add$top.v:77$697_Y.
Removed top 3 bits (of 4) from wire top.$flatten\divA.$1\dec_tens[3:0].
Removed top 2 bits (of 4) from wire top.$flatten\divA.$add$top.v:209$458_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divA.$sub$top.v:208$454_Y.
Removed top 31 bits (of 32) from wire top.$flatten\divA.$sub$top.v:208$457_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divA.$sub$top.v:208$460_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divA.$sub$top.v:208$463_Y.
Removed top 3 bits (of 4) from wire top.$flatten\divB.$1\dec_tens[3:0].
Removed top 2 bits (of 4) from wire top.$flatten\divB.$add$top.v:209$458_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divB.$sub$top.v:208$454_Y.
Removed top 31 bits (of 32) from wire top.$flatten\divB.$sub$top.v:208$457_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divB.$sub$top.v:208$460_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divB.$sub$top.v:208$463_Y.
Removed top 3 bits (of 4) from wire top.$flatten\divC.$1\dec_tens[3:0].
Removed top 2 bits (of 4) from wire top.$flatten\divC.$add$top.v:209$458_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divC.$sub$top.v:208$454_Y.
Removed top 31 bits (of 32) from wire top.$flatten\divC.$sub$top.v:208$457_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divC.$sub$top.v:208$460_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divC.$sub$top.v:208$463_Y.
Removed top 3 bits (of 4) from wire top.$flatten\divD.$1\dec_tens[3:0].
Removed top 2 bits (of 4) from wire top.$flatten\divD.$add$top.v:209$458_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divD.$sub$top.v:208$454_Y.
Removed top 31 bits (of 32) from wire top.$flatten\divD.$sub$top.v:208$457_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divD.$sub$top.v:208$460_Y.
Removed top 26 bits (of 32) from wire top.$flatten\divD.$sub$top.v:208$463_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$413_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$418_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$423_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$428_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$433_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$438_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$443_Y.
Removed top 1 bits (of 8) from wire top.$flatten\lcd_inst.$add$top.v:1083$448_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$414_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$419_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$424_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$429_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$434_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$439_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$444_Y.
Removed top 6 bits (of 8) from wire top.$flatten\lcd_inst.$sub$top.v:1085$449_Y.

2.15. Executing PEEPOPT pass (run peephole optimizers).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 67 unused wires.

2.17. Executing SHARE pass (SAT-based resource sharing).

2.18. Executing TECHMAP pass (map to technology primitives).

2.18.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.18.2. Continuing TECHMAP pass.
Using template $paramod$12bed99da6b1b0c2b04b72175d8519b83392a99c\_90_lut_cmp_ for cells of type $lt.
Using template $paramod$8b5c83b91d9dbe18209528e37f0bd7eb60d3b910\_90_lut_cmp_ for cells of type $le.
No more expansions possible.

2.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 72 unused wires.

2.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $flatten\10_2_i4.\DIG_Counter_Nbit_i0.$add$top.v:134$716 ($add).
  creating $macc model for $flatten\Contador_i0.\DIG_Add_i6.$add$top.v:177$706 ($add).
  creating $macc model for $flatten\Contador_i0.\DIG_Counter_Nbit_i0.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i0.\DIG_Counter_Nbit_i1.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i0.\DIG_Counter_Nbit_i2.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i0.\DIG_Counter_Nbit_i3.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i0.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\Contador_i0.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\Contador_i1.\DIG_Add_i6.$add$top.v:177$706 ($add).
  creating $macc model for $flatten\Contador_i1.\DIG_Counter_Nbit_i0.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i1.\DIG_Counter_Nbit_i1.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i1.\DIG_Counter_Nbit_i2.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i1.\DIG_Counter_Nbit_i3.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i1.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\Contador_i1.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\Contador_i2.\DIG_Add_i6.$add$top.v:177$706 ($add).
  creating $macc model for $flatten\Contador_i2.\DIG_Counter_Nbit_i0.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i2.\DIG_Counter_Nbit_i1.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i2.\DIG_Counter_Nbit_i2.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i2.\DIG_Counter_Nbit_i3.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i2.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\Contador_i2.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\Contador_i3.\DIG_Add_i6.$add$top.v:177$706 ($add).
  creating $macc model for $flatten\Contador_i3.\DIG_Counter_Nbit_i0.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i3.\DIG_Counter_Nbit_i1.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i3.\DIG_Counter_Nbit_i2.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i3.\DIG_Counter_Nbit_i3.$add$top.v:134$711 ($add).
  creating $macc model for $flatten\Contador_i3.\DIG_Sub_i4.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\Contador_i3.\DIG_Sub_i5.$sub$top.v:159$708 ($sub).
  creating $macc model for $flatten\clk1.$add$top.v:111$691 ($add).
  creating $macc model for $flatten\clk2.$add$top.v:25$474 ($add).
  creating $macc model for $flatten\clk3.$add$top.v:54$703 ($add).
  creating $macc model for $flatten\debounce_Al.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_All.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Ap.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_App.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Bl.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Bll.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Bp.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Bpp.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Cl.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Cll.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Cp.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Cpp.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Dl.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Dll.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Dp.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\debounce_Dpp.$add$top.v:77$697 ($add).
  creating $macc model for $flatten\divA.$add$top.v:209$458 ($add).
  creating $macc model for $flatten\divA.$add$top.v:209$461 ($add).
  creating $macc model for $flatten\divA.$add$top.v:209$464 ($add).
  creating $macc model for $flatten\divA.$add$top.v:209$467 ($add).
  creating $macc model for $flatten\divA.$add$top.v:209$470 ($add).
  creating $macc model for $flatten\divA.$sub$top.v:208$454 ($sub).
  creating $macc model for $flatten\divA.$sub$top.v:208$457 ($sub).
  creating $macc model for $flatten\divA.$sub$top.v:208$460 ($sub).
  creating $macc model for $flatten\divA.$sub$top.v:208$463 ($sub).
  creating $macc model for $flatten\divA.$sub$top.v:208$466 ($sub).
  creating $macc model for $flatten\divA.$sub$top.v:208$469 ($sub).
  creating $macc model for $flatten\divB.$add$top.v:209$458 ($add).
  creating $macc model for $flatten\divB.$add$top.v:209$461 ($add).
  creating $macc model for $flatten\divB.$add$top.v:209$464 ($add).
  creating $macc model for $flatten\divB.$add$top.v:209$467 ($add).
  creating $macc model for $flatten\divB.$add$top.v:209$470 ($add).
  creating $macc model for $flatten\divB.$sub$top.v:208$454 ($sub).
  creating $macc model for $flatten\divB.$sub$top.v:208$457 ($sub).
  creating $macc model for $flatten\divB.$sub$top.v:208$460 ($sub).
  creating $macc model for $flatten\divB.$sub$top.v:208$463 ($sub).
  creating $macc model for $flatten\divB.$sub$top.v:208$466 ($sub).
  creating $macc model for $flatten\divB.$sub$top.v:208$469 ($sub).
  creating $macc model for $flatten\divC.$add$top.v:209$458 ($add).
  creating $macc model for $flatten\divC.$add$top.v:209$461 ($add).
  creating $macc model for $flatten\divC.$add$top.v:209$464 ($add).
  creating $macc model for $flatten\divC.$add$top.v:209$467 ($add).
  creating $macc model for $flatten\divC.$add$top.v:209$470 ($add).
  creating $macc model for $flatten\divC.$sub$top.v:208$454 ($sub).
  creating $macc model for $flatten\divC.$sub$top.v:208$457 ($sub).
  creating $macc model for $flatten\divC.$sub$top.v:208$460 ($sub).
  creating $macc model for $flatten\divC.$sub$top.v:208$463 ($sub).
  creating $macc model for $flatten\divC.$sub$top.v:208$466 ($sub).
  creating $macc model for $flatten\divC.$sub$top.v:208$469 ($sub).
  creating $macc model for $flatten\divD.$add$top.v:209$458 ($add).
  creating $macc model for $flatten\divD.$add$top.v:209$461 ($add).
  creating $macc model for $flatten\divD.$add$top.v:209$464 ($add).
  creating $macc model for $flatten\divD.$add$top.v:209$467 ($add).
  creating $macc model for $flatten\divD.$add$top.v:209$470 ($add).
  creating $macc model for $flatten\divD.$sub$top.v:208$454 ($sub).
  creating $macc model for $flatten\divD.$sub$top.v:208$457 ($sub).
  creating $macc model for $flatten\divD.$sub$top.v:208$460 ($sub).
  creating $macc model for $flatten\divD.$sub$top.v:208$463 ($sub).
  creating $macc model for $flatten\divD.$sub$top.v:208$466 ($sub).
  creating $macc model for $flatten\divD.$sub$top.v:208$469 ($sub).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$413 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$418 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$423 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$428 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$433 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$438 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$443 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1083$448 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$415 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$420 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$425 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$430 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$435 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$440 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$445 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1085$450 ($add).
  creating $macc model for $flatten\lcd_inst.$add$top.v:1099$391 ($add).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$414 ($sub).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$419 ($sub).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$424 ($sub).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$429 ($sub).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$434 ($sub).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$439 ($sub).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$444 ($sub).
  creating $macc model for $flatten\lcd_inst.$sub$top.v:1085$449 ($sub).
  merging $macc model for $flatten\Contador_i3.\DIG_Sub_i5.$sub$top.v:159$708 into $flatten\Contador_i3.\DIG_Add_i6.$add$top.v:177$706.
  merging $macc model for $flatten\Contador_i3.\DIG_Sub_i4.$sub$top.v:159$708 into $flatten\Contador_i3.\DIG_Add_i6.$add$top.v:177$706.
  merging $macc model for $flatten\Contador_i2.\DIG_Sub_i5.$sub$top.v:159$708 into $flatten\Contador_i2.\DIG_Add_i6.$add$top.v:177$706.
  merging $macc model for $flatten\Contador_i2.\DIG_Sub_i4.$sub$top.v:159$708 into $flatten\Contador_i2.\DIG_Add_i6.$add$top.v:177$706.
  merging $macc model for $flatten\Contador_i1.\DIG_Sub_i5.$sub$top.v:159$708 into $flatten\Contador_i1.\DIG_Add_i6.$add$top.v:177$706.
  merging $macc model for $flatten\Contador_i1.\DIG_Sub_i4.$sub$top.v:159$708 into $flatten\Contador_i1.\DIG_Add_i6.$add$top.v:177$706.
  merging $macc model for $flatten\Contador_i0.\DIG_Sub_i5.$sub$top.v:159$708 into $flatten\Contador_i0.\DIG_Add_i6.$add$top.v:177$706.
  merging $macc model for $flatten\Contador_i0.\DIG_Sub_i4.$sub$top.v:159$708 into $flatten\Contador_i0.\DIG_Add_i6.$add$top.v:177$706.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1099$391.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$450.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$445.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$440.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$435.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$430.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$425.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$420.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1085$415.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$448.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$443.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$438.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$433.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$428.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$423.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$418.
  creating $alu model for $macc $flatten\lcd_inst.$add$top.v:1083$413.
  creating $alu model for $macc $flatten\divD.$sub$top.v:208$469.
  creating $alu model for $macc $flatten\divD.$sub$top.v:208$466.
  creating $alu model for $macc $flatten\divD.$sub$top.v:208$463.
  creating $alu model for $macc $flatten\divD.$sub$top.v:208$460.
  creating $alu model for $macc $flatten\divD.$sub$top.v:208$457.
  creating $alu model for $macc $flatten\divD.$sub$top.v:208$454.
  creating $alu model for $macc $flatten\divD.$add$top.v:209$470.
  creating $alu model for $macc $flatten\divD.$add$top.v:209$467.
  creating $alu model for $macc $flatten\divD.$add$top.v:209$464.
  creating $alu model for $macc $flatten\divD.$add$top.v:209$461.
  creating $alu model for $macc $flatten\divD.$add$top.v:209$458.
  creating $alu model for $macc $flatten\divC.$sub$top.v:208$469.
  creating $alu model for $macc $flatten\divC.$sub$top.v:208$466.
  creating $alu model for $macc $flatten\divC.$sub$top.v:208$463.
  creating $alu model for $macc $flatten\divC.$sub$top.v:208$460.
  creating $alu model for $macc $flatten\divC.$sub$top.v:208$457.
  creating $alu model for $macc $flatten\divC.$sub$top.v:208$454.
  creating $alu model for $macc $flatten\divC.$add$top.v:209$470.
  creating $alu model for $macc $flatten\divC.$add$top.v:209$467.
  creating $alu model for $macc $flatten\divC.$add$top.v:209$464.
  creating $alu model for $macc $flatten\divC.$add$top.v:209$461.
  creating $alu model for $macc $flatten\divC.$add$top.v:209$458.
  creating $alu model for $macc $flatten\divB.$sub$top.v:208$469.
  creating $alu model for $macc $flatten\divB.$sub$top.v:208$466.
  creating $alu model for $macc $flatten\divB.$sub$top.v:208$463.
  creating $alu model for $macc $flatten\divB.$sub$top.v:208$460.
  creating $alu model for $macc $flatten\divB.$sub$top.v:208$457.
  creating $alu model for $macc $flatten\divB.$sub$top.v:208$454.
  creating $alu model for $macc $flatten\divB.$add$top.v:209$470.
  creating $alu model for $macc $flatten\divB.$add$top.v:209$467.
  creating $alu model for $macc $flatten\divB.$add$top.v:209$464.
  creating $alu model for $macc $flatten\divB.$add$top.v:209$461.
  creating $alu model for $macc $flatten\divB.$add$top.v:209$458.
  creating $alu model for $macc $flatten\divA.$sub$top.v:208$469.
  creating $alu model for $macc $flatten\divA.$sub$top.v:208$466.
  creating $alu model for $macc $flatten\divA.$sub$top.v:208$463.
  creating $alu model for $macc $flatten\divA.$sub$top.v:208$460.
  creating $alu model for $macc $flatten\divA.$sub$top.v:208$457.
  creating $alu model for $macc $flatten\divA.$sub$top.v:208$454.
  creating $alu model for $macc $flatten\divA.$add$top.v:209$470.
  creating $alu model for $macc $flatten\divA.$add$top.v:209$467.
  creating $alu model for $macc $flatten\divA.$add$top.v:209$464.
  creating $alu model for $macc $flatten\divA.$add$top.v:209$461.
  creating $alu model for $macc $flatten\divA.$add$top.v:209$458.
  creating $alu model for $macc $flatten\debounce_Dpp.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Dp.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Dll.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Dl.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Cpp.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Cp.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Cll.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Cl.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Bpp.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Bp.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Bll.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Bl.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_App.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Ap.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_All.$add$top.v:77$697.
  creating $alu model for $macc $flatten\debounce_Al.$add$top.v:77$697.
  creating $alu model for $macc $flatten\clk3.$add$top.v:54$703.
  creating $alu model for $macc $flatten\clk2.$add$top.v:25$474.
  creating $alu model for $macc $flatten\clk1.$add$top.v:111$691.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$414.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$419.
  creating $alu model for $macc $flatten\Contador_i3.\DIG_Counter_Nbit_i3.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i3.\DIG_Counter_Nbit_i2.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i3.\DIG_Counter_Nbit_i1.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i3.\DIG_Counter_Nbit_i0.$add$top.v:134$711.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$424.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$429.
  creating $alu model for $macc $flatten\Contador_i2.\DIG_Counter_Nbit_i3.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i2.\DIG_Counter_Nbit_i2.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i2.\DIG_Counter_Nbit_i1.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i2.\DIG_Counter_Nbit_i0.$add$top.v:134$711.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$434.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$439.
  creating $alu model for $macc $flatten\Contador_i1.\DIG_Counter_Nbit_i3.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i1.\DIG_Counter_Nbit_i2.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i1.\DIG_Counter_Nbit_i1.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i1.\DIG_Counter_Nbit_i0.$add$top.v:134$711.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$444.
  creating $alu model for $macc $flatten\lcd_inst.$sub$top.v:1085$449.
  creating $alu model for $macc $flatten\Contador_i0.\DIG_Counter_Nbit_i3.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i0.\DIG_Counter_Nbit_i2.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i0.\DIG_Counter_Nbit_i1.$add$top.v:134$711.
  creating $alu model for $macc $flatten\Contador_i0.\DIG_Counter_Nbit_i0.$add$top.v:134$711.
  creating $alu model for $macc $flatten\10_2_i4.\DIG_Counter_Nbit_i0.$add$top.v:134$716.
  creating $macc cell for $flatten\Contador_i2.\DIG_Add_i6.$add$top.v:177$706: $auto$alumacc.cc:365:replace_macc$1373
  creating $macc cell for $flatten\Contador_i1.\DIG_Add_i6.$add$top.v:177$706: $auto$alumacc.cc:365:replace_macc$1374
  creating $macc cell for $flatten\Contador_i0.\DIG_Add_i6.$add$top.v:177$706: $auto$alumacc.cc:365:replace_macc$1375
  creating $macc cell for $flatten\Contador_i3.\DIG_Add_i6.$add$top.v:177$706: $auto$alumacc.cc:365:replace_macc$1376
  creating $alu model for $flatten\Comparador_i5.\CompUnsigned_i0.$lt$top.v:374$728 ($lt): new $alu
  creating $alu model for $flatten\Comparador_i5.\CompUnsigned_i1.$lt$top.v:374$728 ($lt): new $alu
  creating $alu model for $flatten\Comparador_i5.\CompUnsigned_i4.$gt$top.v:372$726 ($gt): new $alu
  creating $alu model for $flatten\Comparador_i5.\CompUnsigned_i4.$lt$top.v:374$728 ($lt): merged with $flatten\Comparador_i5.\CompUnsigned_i4.$gt$top.v:372$726.
  creating $alu model for $flatten\divA.$ge$top.v:207$453 ($ge): new $alu
  creating $alu model for $flatten\divA.$ge$top.v:207$456 ($ge): new $alu
  creating $alu model for $flatten\divA.$ge$top.v:207$459 ($ge): new $alu
  creating $alu model for $flatten\divA.$ge$top.v:207$462 ($ge): new $alu
  creating $alu model for $flatten\divA.$ge$top.v:207$465 ($ge): new $alu
  creating $alu model for $flatten\divA.$ge$top.v:207$468 ($ge): new $alu
  creating $alu model for $flatten\divB.$ge$top.v:207$453 ($ge): new $alu
  creating $alu model for $flatten\divB.$ge$top.v:207$456 ($ge): new $alu
  creating $alu model for $flatten\divB.$ge$top.v:207$459 ($ge): new $alu
  creating $alu model for $flatten\divB.$ge$top.v:207$462 ($ge): new $alu
  creating $alu model for $flatten\divB.$ge$top.v:207$465 ($ge): new $alu
  creating $alu model for $flatten\divB.$ge$top.v:207$468 ($ge): new $alu
  creating $alu model for $flatten\divC.$ge$top.v:207$453 ($ge): new $alu
  creating $alu model for $flatten\divC.$ge$top.v:207$456 ($ge): new $alu
  creating $alu model for $flatten\divC.$ge$top.v:207$459 ($ge): new $alu
  creating $alu model for $flatten\divC.$ge$top.v:207$462 ($ge): new $alu
  creating $alu model for $flatten\divC.$ge$top.v:207$465 ($ge): new $alu
  creating $alu model for $flatten\divC.$ge$top.v:207$468 ($ge): new $alu
  creating $alu model for $flatten\divD.$ge$top.v:207$453 ($ge): new $alu
  creating $alu model for $flatten\divD.$ge$top.v:207$456 ($ge): new $alu
  creating $alu model for $flatten\divD.$ge$top.v:207$459 ($ge): new $alu
  creating $alu model for $flatten\divD.$ge$top.v:207$462 ($ge): new $alu
  creating $alu model for $flatten\divD.$ge$top.v:207$465 ($ge): new $alu
  creating $alu model for $flatten\divD.$ge$top.v:207$468 ($ge): new $alu
  creating $alu model for $flatten\Comparador_i5.\CompUnsigned_i4.$eq$top.v:373$727 ($eq): merged with $flatten\Comparador_i5.\CompUnsigned_i4.$gt$top.v:372$726.
  creating $alu cell for $flatten\divD.$ge$top.v:207$468: $auto$alumacc.cc:485:replace_alu$1404
  creating $alu cell for $flatten\divD.$ge$top.v:207$465: $auto$alumacc.cc:485:replace_alu$1413
  creating $alu cell for $flatten\divD.$ge$top.v:207$462: $auto$alumacc.cc:485:replace_alu$1422
  creating $alu cell for $flatten\divD.$ge$top.v:207$459: $auto$alumacc.cc:485:replace_alu$1431
  creating $alu cell for $flatten\divD.$ge$top.v:207$456: $auto$alumacc.cc:485:replace_alu$1440
  creating $alu cell for $flatten\divD.$ge$top.v:207$453: $auto$alumacc.cc:485:replace_alu$1449
  creating $alu cell for $flatten\divC.$ge$top.v:207$468: $auto$alumacc.cc:485:replace_alu$1458
  creating $alu cell for $flatten\divC.$ge$top.v:207$465: $auto$alumacc.cc:485:replace_alu$1467
  creating $alu cell for $flatten\divC.$ge$top.v:207$462: $auto$alumacc.cc:485:replace_alu$1476
  creating $alu cell for $flatten\divC.$ge$top.v:207$459: $auto$alumacc.cc:485:replace_alu$1485
  creating $alu cell for $flatten\divC.$ge$top.v:207$456: $auto$alumacc.cc:485:replace_alu$1494
  creating $alu cell for $flatten\divC.$ge$top.v:207$453: $auto$alumacc.cc:485:replace_alu$1503
  creating $alu cell for $flatten\divB.$ge$top.v:207$468: $auto$alumacc.cc:485:replace_alu$1512
  creating $alu cell for $flatten\divB.$ge$top.v:207$465: $auto$alumacc.cc:485:replace_alu$1521
  creating $alu cell for $flatten\divB.$ge$top.v:207$462: $auto$alumacc.cc:485:replace_alu$1530
  creating $alu cell for $flatten\divB.$ge$top.v:207$459: $auto$alumacc.cc:485:replace_alu$1539
  creating $alu cell for $flatten\divB.$ge$top.v:207$456: $auto$alumacc.cc:485:replace_alu$1548
  creating $alu cell for $flatten\divB.$ge$top.v:207$453: $auto$alumacc.cc:485:replace_alu$1557
  creating $alu cell for $flatten\divA.$ge$top.v:207$468: $auto$alumacc.cc:485:replace_alu$1566
  creating $alu cell for $flatten\divA.$ge$top.v:207$465: $auto$alumacc.cc:485:replace_alu$1575
  creating $alu cell for $flatten\divA.$ge$top.v:207$462: $auto$alumacc.cc:485:replace_alu$1584
  creating $alu cell for $flatten\divA.$ge$top.v:207$459: $auto$alumacc.cc:485:replace_alu$1593
  creating $alu cell for $flatten\divA.$ge$top.v:207$456: $auto$alumacc.cc:485:replace_alu$1602
  creating $alu cell for $flatten\divA.$ge$top.v:207$453: $auto$alumacc.cc:485:replace_alu$1611
  creating $alu cell for $flatten\Comparador_i5.\CompUnsigned_i4.$gt$top.v:372$726, $flatten\Comparador_i5.\CompUnsigned_i4.$lt$top.v:374$728, $flatten\Comparador_i5.\CompUnsigned_i4.$eq$top.v:373$727: $auto$alumacc.cc:485:replace_alu$1620
  creating $alu cell for $flatten\Comparador_i5.\CompUnsigned_i1.$lt$top.v:374$728: $auto$alumacc.cc:485:replace_alu$1631
  creating $alu cell for $flatten\Comparador_i5.\CompUnsigned_i0.$lt$top.v:374$728: $auto$alumacc.cc:485:replace_alu$1642
  creating $alu cell for $flatten\10_2_i4.\DIG_Counter_Nbit_i0.$add$top.v:134$716: $auto$alumacc.cc:485:replace_alu$1653
  creating $alu cell for $flatten\Contador_i0.\DIG_Counter_Nbit_i0.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1656
  creating $alu cell for $flatten\Contador_i0.\DIG_Counter_Nbit_i1.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1659
  creating $alu cell for $flatten\Contador_i0.\DIG_Counter_Nbit_i2.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1662
  creating $alu cell for $flatten\Contador_i0.\DIG_Counter_Nbit_i3.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1665
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$449: $auto$alumacc.cc:485:replace_alu$1668
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$444: $auto$alumacc.cc:485:replace_alu$1671
  creating $alu cell for $flatten\Contador_i1.\DIG_Counter_Nbit_i0.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1674
  creating $alu cell for $flatten\Contador_i1.\DIG_Counter_Nbit_i1.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1677
  creating $alu cell for $flatten\Contador_i1.\DIG_Counter_Nbit_i2.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1680
  creating $alu cell for $flatten\Contador_i1.\DIG_Counter_Nbit_i3.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1683
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$439: $auto$alumacc.cc:485:replace_alu$1686
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$434: $auto$alumacc.cc:485:replace_alu$1689
  creating $alu cell for $flatten\Contador_i2.\DIG_Counter_Nbit_i0.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1692
  creating $alu cell for $flatten\Contador_i2.\DIG_Counter_Nbit_i1.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1695
  creating $alu cell for $flatten\Contador_i2.\DIG_Counter_Nbit_i2.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1698
  creating $alu cell for $flatten\Contador_i2.\DIG_Counter_Nbit_i3.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1701
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$429: $auto$alumacc.cc:485:replace_alu$1704
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$424: $auto$alumacc.cc:485:replace_alu$1707
  creating $alu cell for $flatten\Contador_i3.\DIG_Counter_Nbit_i0.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1710
  creating $alu cell for $flatten\Contador_i3.\DIG_Counter_Nbit_i1.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1713
  creating $alu cell for $flatten\Contador_i3.\DIG_Counter_Nbit_i2.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1716
  creating $alu cell for $flatten\Contador_i3.\DIG_Counter_Nbit_i3.$add$top.v:134$711: $auto$alumacc.cc:485:replace_alu$1719
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$419: $auto$alumacc.cc:485:replace_alu$1722
  creating $alu cell for $flatten\lcd_inst.$sub$top.v:1085$414: $auto$alumacc.cc:485:replace_alu$1725
  creating $alu cell for $flatten\clk1.$add$top.v:111$691: $auto$alumacc.cc:485:replace_alu$1728
  creating $alu cell for $flatten\clk2.$add$top.v:25$474: $auto$alumacc.cc:485:replace_alu$1731
  creating $alu cell for $flatten\clk3.$add$top.v:54$703: $auto$alumacc.cc:485:replace_alu$1734
  creating $alu cell for $flatten\debounce_Al.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1737
  creating $alu cell for $flatten\debounce_All.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1740
  creating $alu cell for $flatten\debounce_Ap.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1743
  creating $alu cell for $flatten\debounce_App.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1746
  creating $alu cell for $flatten\debounce_Bl.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1749
  creating $alu cell for $flatten\debounce_Bll.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1752
  creating $alu cell for $flatten\debounce_Bp.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1755
  creating $alu cell for $flatten\debounce_Bpp.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1758
  creating $alu cell for $flatten\debounce_Cl.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1761
  creating $alu cell for $flatten\debounce_Cll.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1764
  creating $alu cell for $flatten\debounce_Cp.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1767
  creating $alu cell for $flatten\debounce_Cpp.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1770
  creating $alu cell for $flatten\debounce_Dl.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1773
  creating $alu cell for $flatten\debounce_Dll.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1776
  creating $alu cell for $flatten\debounce_Dp.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1779
  creating $alu cell for $flatten\debounce_Dpp.$add$top.v:77$697: $auto$alumacc.cc:485:replace_alu$1782
  creating $alu cell for $flatten\divA.$add$top.v:209$458: $auto$alumacc.cc:485:replace_alu$1785
  creating $alu cell for $flatten\divA.$add$top.v:209$461: $auto$alumacc.cc:485:replace_alu$1788
  creating $alu cell for $flatten\divA.$add$top.v:209$464: $auto$alumacc.cc:485:replace_alu$1791
  creating $alu cell for $flatten\divA.$add$top.v:209$467: $auto$alumacc.cc:485:replace_alu$1794
  creating $alu cell for $flatten\divA.$add$top.v:209$470: $auto$alumacc.cc:485:replace_alu$1797
  creating $alu cell for $flatten\divA.$sub$top.v:208$454: $auto$alumacc.cc:485:replace_alu$1800
  creating $alu cell for $flatten\divA.$sub$top.v:208$457: $auto$alumacc.cc:485:replace_alu$1803
  creating $alu cell for $flatten\divA.$sub$top.v:208$460: $auto$alumacc.cc:485:replace_alu$1806
  creating $alu cell for $flatten\divA.$sub$top.v:208$463: $auto$alumacc.cc:485:replace_alu$1809
  creating $alu cell for $flatten\divA.$sub$top.v:208$466: $auto$alumacc.cc:485:replace_alu$1812
  creating $alu cell for $flatten\divA.$sub$top.v:208$469: $auto$alumacc.cc:485:replace_alu$1815
  creating $alu cell for $flatten\divB.$add$top.v:209$458: $auto$alumacc.cc:485:replace_alu$1818
  creating $alu cell for $flatten\divB.$add$top.v:209$461: $auto$alumacc.cc:485:replace_alu$1821
  creating $alu cell for $flatten\divB.$add$top.v:209$464: $auto$alumacc.cc:485:replace_alu$1824
  creating $alu cell for $flatten\divB.$add$top.v:209$467: $auto$alumacc.cc:485:replace_alu$1827
  creating $alu cell for $flatten\divB.$add$top.v:209$470: $auto$alumacc.cc:485:replace_alu$1830
  creating $alu cell for $flatten\divB.$sub$top.v:208$454: $auto$alumacc.cc:485:replace_alu$1833
  creating $alu cell for $flatten\divB.$sub$top.v:208$457: $auto$alumacc.cc:485:replace_alu$1836
  creating $alu cell for $flatten\divB.$sub$top.v:208$460: $auto$alumacc.cc:485:replace_alu$1839
  creating $alu cell for $flatten\divB.$sub$top.v:208$463: $auto$alumacc.cc:485:replace_alu$1842
  creating $alu cell for $flatten\divB.$sub$top.v:208$466: $auto$alumacc.cc:485:replace_alu$1845
  creating $alu cell for $flatten\divB.$sub$top.v:208$469: $auto$alumacc.cc:485:replace_alu$1848
  creating $alu cell for $flatten\divC.$add$top.v:209$458: $auto$alumacc.cc:485:replace_alu$1851
  creating $alu cell for $flatten\divC.$add$top.v:209$461: $auto$alumacc.cc:485:replace_alu$1854
  creating $alu cell for $flatten\divC.$add$top.v:209$464: $auto$alumacc.cc:485:replace_alu$1857
  creating $alu cell for $flatten\divC.$add$top.v:209$467: $auto$alumacc.cc:485:replace_alu$1860
  creating $alu cell for $flatten\divC.$add$top.v:209$470: $auto$alumacc.cc:485:replace_alu$1863
  creating $alu cell for $flatten\divC.$sub$top.v:208$454: $auto$alumacc.cc:485:replace_alu$1866
  creating $alu cell for $flatten\divC.$sub$top.v:208$457: $auto$alumacc.cc:485:replace_alu$1869
  creating $alu cell for $flatten\divC.$sub$top.v:208$460: $auto$alumacc.cc:485:replace_alu$1872
  creating $alu cell for $flatten\divC.$sub$top.v:208$463: $auto$alumacc.cc:485:replace_alu$1875
  creating $alu cell for $flatten\divC.$sub$top.v:208$466: $auto$alumacc.cc:485:replace_alu$1878
  creating $alu cell for $flatten\divC.$sub$top.v:208$469: $auto$alumacc.cc:485:replace_alu$1881
  creating $alu cell for $flatten\divD.$add$top.v:209$458: $auto$alumacc.cc:485:replace_alu$1884
  creating $alu cell for $flatten\divD.$add$top.v:209$461: $auto$alumacc.cc:485:replace_alu$1887
  creating $alu cell for $flatten\divD.$add$top.v:209$464: $auto$alumacc.cc:485:replace_alu$1890
  creating $alu cell for $flatten\divD.$add$top.v:209$467: $auto$alumacc.cc:485:replace_alu$1893
  creating $alu cell for $flatten\divD.$add$top.v:209$470: $auto$alumacc.cc:485:replace_alu$1896
  creating $alu cell for $flatten\divD.$sub$top.v:208$454: $auto$alumacc.cc:485:replace_alu$1899
  creating $alu cell for $flatten\divD.$sub$top.v:208$457: $auto$alumacc.cc:485:replace_alu$1902
  creating $alu cell for $flatten\divD.$sub$top.v:208$460: $auto$alumacc.cc:485:replace_alu$1905
  creating $alu cell for $flatten\divD.$sub$top.v:208$463: $auto$alumacc.cc:485:replace_alu$1908
  creating $alu cell for $flatten\divD.$sub$top.v:208$466: $auto$alumacc.cc:485:replace_alu$1911
  creating $alu cell for $flatten\divD.$sub$top.v:208$469: $auto$alumacc.cc:485:replace_alu$1914
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$413: $auto$alumacc.cc:485:replace_alu$1917
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$418: $auto$alumacc.cc:485:replace_alu$1920
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$423: $auto$alumacc.cc:485:replace_alu$1923
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$428: $auto$alumacc.cc:485:replace_alu$1926
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$433: $auto$alumacc.cc:485:replace_alu$1929
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$438: $auto$alumacc.cc:485:replace_alu$1932
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$443: $auto$alumacc.cc:485:replace_alu$1935
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1083$448: $auto$alumacc.cc:485:replace_alu$1938
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$415: $auto$alumacc.cc:485:replace_alu$1941
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$420: $auto$alumacc.cc:485:replace_alu$1944
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$425: $auto$alumacc.cc:485:replace_alu$1947
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$430: $auto$alumacc.cc:485:replace_alu$1950
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$435: $auto$alumacc.cc:485:replace_alu$1953
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$440: $auto$alumacc.cc:485:replace_alu$1956
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$445: $auto$alumacc.cc:485:replace_alu$1959
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1085$450: $auto$alumacc.cc:485:replace_alu$1962
  creating $alu cell for $flatten\lcd_inst.$add$top.v:1099$391: $auto$alumacc.cc:485:replace_alu$1965
  created 132 $alu and 4 $macc cells.

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.6. Executing OPT_DFF pass (perform DFF optimizations).

2.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 8 unused cells and 64 unused wires.

2.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.9. Rerunning OPT passes. (Maybe there is more to do..)

2.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.13. Executing OPT_DFF pass (perform DFF optimizations).

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.16. Finished OPT passes. (There is nothing left to do.)

2.23. Executing MEMORY pass.

2.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

2.26. Executing TECHMAP pass (map to technology primitives).

2.26.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

2.26.2. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

2.26.3. Continuing TECHMAP pass.
No more expansions possible.

2.27. Executing ICE40_BRAMINIT pass.

2.28. Executing OPT pass (performing simple optimizations).

2.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.28.3. Executing OPT_DFF pass (perform DFF optimizations).

2.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 32 unused cells and 71 unused wires.

2.28.5. Finished fast OPT passes.

2.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$844:
      Old ports: A=$flatten\divA.$5\temp[5:0] [3:0], B={ $flatten\divA.$sub$top.v:208$469_Y [3:1] $flatten\divA.$5\temp[5:0] [0] }, Y=\divA.dec_ones
      New ports: A=$flatten\divA.$5\temp[5:0] [3:1], B=$flatten\divA.$sub$top.v:208$469_Y [3:1], Y=\divA.dec_ones [3:1]
      New connections: \divA.dec_ones [0] = $flatten\divA.$5\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$850:
      Old ports: A=$flatten\divA.$4\temp[5:0], B={ $flatten\divA.$sub$top.v:208$466_Y [5:1] $flatten\divA.$4\temp[5:0] [0] }, Y=$flatten\divA.$5\temp[5:0]
      New ports: A=$flatten\divA.$4\temp[5:0] [5:1], B=$flatten\divA.$sub$top.v:208$466_Y [5:1], Y=$flatten\divA.$5\temp[5:0] [5:1]
      New connections: $flatten\divA.$5\temp[5:0] [0] = $flatten\divA.$4\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$856:
      Old ports: A={ $flatten\divA.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1311 [0] }, B=$auto$wreduce.cc:461:run$1311 [5:0], Y=$flatten\divA.$4\temp[5:0]
      New ports: A=$flatten\divA.$3\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1311 [5:1], Y=$flatten\divA.$4\temp[5:0] [5:1]
      New connections: $flatten\divA.$4\temp[5:0] [0] = $auto$wreduce.cc:461:run$1311 [0]
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$862:
      Old ports: A={ $flatten\divA.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1310 [0] }, B=$auto$wreduce.cc:461:run$1310 [5:0], Y={ $flatten\divA.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1311 [0] }
      New ports: A=$flatten\divA.$2\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1310 [5:1], Y=$flatten\divA.$3\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1311 [0] = $auto$wreduce.cc:461:run$1310 [0]
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$865:
      Old ports: A={ 3'000 $auto$rtlil.cc:2416:ReduceOr$1619 }, B={ 2'00 $auto$wreduce.cc:461:run$1307 [1:0] }, Y=$flatten\divA.$2\dec_tens[3:0]
      New ports: A={ 1'0 $auto$rtlil.cc:2416:ReduceOr$1619 }, B=$auto$wreduce.cc:461:run$1307 [1:0], Y=$flatten\divA.$2\dec_tens[3:0] [1:0]
      New connections: $flatten\divA.$2\dec_tens[3:0] [3:2] = 2'00
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$868:
      Old ports: A={ $flatten\divA.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1309 [0] }, B=$auto$wreduce.cc:461:run$1309 [5:0], Y={ $flatten\divA.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1310 [0] }
      New ports: A=$flatten\divA.$1\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1309 [5:1], Y=$flatten\divA.$2\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1310 [0] = $auto$wreduce.cc:461:run$1309 [0]
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$874:
      Old ports: A=\Comparador_i5.CompUnsigned_i0.a, B={ $auto$wreduce.cc:461:run$1308 [5:1] \Comparador_i5.CompUnsigned_i0.a [0] }, Y={ $flatten\divA.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1309 [0] }
      New ports: A=\Comparador_i5.CompUnsigned_i0.a [5:1], B=$auto$wreduce.cc:461:run$1308 [5:1], Y=$flatten\divA.$1\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1309 [0] = \Comparador_i5.CompUnsigned_i0.a [0]
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$844:
      Old ports: A=$flatten\divB.$5\temp[5:0] [3:0], B={ $flatten\divB.$sub$top.v:208$469_Y [3:1] $flatten\divB.$5\temp[5:0] [0] }, Y=\divB.dec_ones
      New ports: A=$flatten\divB.$5\temp[5:0] [3:1], B=$flatten\divB.$sub$top.v:208$469_Y [3:1], Y=\divB.dec_ones [3:1]
      New connections: \divB.dec_ones [0] = $flatten\divB.$5\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$850:
      Old ports: A=$flatten\divB.$4\temp[5:0], B={ $flatten\divB.$sub$top.v:208$466_Y [5:1] $flatten\divB.$4\temp[5:0] [0] }, Y=$flatten\divB.$5\temp[5:0]
      New ports: A=$flatten\divB.$4\temp[5:0] [5:1], B=$flatten\divB.$sub$top.v:208$466_Y [5:1], Y=$flatten\divB.$5\temp[5:0] [5:1]
      New connections: $flatten\divB.$5\temp[5:0] [0] = $flatten\divB.$4\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$856:
      Old ports: A={ $flatten\divB.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1317 [0] }, B=$auto$wreduce.cc:461:run$1317 [5:0], Y=$flatten\divB.$4\temp[5:0]
      New ports: A=$flatten\divB.$3\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1317 [5:1], Y=$flatten\divB.$4\temp[5:0] [5:1]
      New connections: $flatten\divB.$4\temp[5:0] [0] = $auto$wreduce.cc:461:run$1317 [0]
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$862:
      Old ports: A={ $flatten\divB.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1316 [0] }, B=$auto$wreduce.cc:461:run$1316 [5:0], Y={ $flatten\divB.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1317 [0] }
      New ports: A=$flatten\divB.$2\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1316 [5:1], Y=$flatten\divB.$3\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1317 [0] = $auto$wreduce.cc:461:run$1316 [0]
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$865:
      Old ports: A={ 3'000 $auto$rtlil.cc:2416:ReduceOr$1565 }, B={ 2'00 $auto$wreduce.cc:461:run$1313 [1:0] }, Y=$flatten\divB.$2\dec_tens[3:0]
      New ports: A={ 1'0 $auto$rtlil.cc:2416:ReduceOr$1565 }, B=$auto$wreduce.cc:461:run$1313 [1:0], Y=$flatten\divB.$2\dec_tens[3:0] [1:0]
      New connections: $flatten\divB.$2\dec_tens[3:0] [3:2] = 2'00
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$868:
      Old ports: A={ $flatten\divB.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1315 [0] }, B=$auto$wreduce.cc:461:run$1315 [5:0], Y={ $flatten\divB.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1316 [0] }
      New ports: A=$flatten\divB.$1\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1315 [5:1], Y=$flatten\divB.$2\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1316 [0] = $auto$wreduce.cc:461:run$1315 [0]
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$874:
      Old ports: A=\Comparador_i5.CompUnsigned_i0.b, B={ $auto$wreduce.cc:461:run$1314 [5:1] \Comparador_i5.CompUnsigned_i0.b [0] }, Y={ $flatten\divB.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1315 [0] }
      New ports: A=\Comparador_i5.CompUnsigned_i0.b [5:1], B=$auto$wreduce.cc:461:run$1314 [5:1], Y=$flatten\divB.$1\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1315 [0] = \Comparador_i5.CompUnsigned_i0.b [0]
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$844:
      Old ports: A=$flatten\divC.$5\temp[5:0] [3:0], B={ $flatten\divC.$sub$top.v:208$469_Y [3:1] $flatten\divC.$5\temp[5:0] [0] }, Y=\divC.dec_ones
      New ports: A=$flatten\divC.$5\temp[5:0] [3:1], B=$flatten\divC.$sub$top.v:208$469_Y [3:1], Y=\divC.dec_ones [3:1]
      New connections: \divC.dec_ones [0] = $flatten\divC.$5\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$850:
      Old ports: A=$flatten\divC.$4\temp[5:0], B={ $flatten\divC.$sub$top.v:208$466_Y [5:1] $flatten\divC.$4\temp[5:0] [0] }, Y=$flatten\divC.$5\temp[5:0]
      New ports: A=$flatten\divC.$4\temp[5:0] [5:1], B=$flatten\divC.$sub$top.v:208$466_Y [5:1], Y=$flatten\divC.$5\temp[5:0] [5:1]
      New connections: $flatten\divC.$5\temp[5:0] [0] = $flatten\divC.$4\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$856:
      Old ports: A={ $flatten\divC.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1323 [0] }, B=$auto$wreduce.cc:461:run$1323 [5:0], Y=$flatten\divC.$4\temp[5:0]
      New ports: A=$flatten\divC.$3\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1323 [5:1], Y=$flatten\divC.$4\temp[5:0] [5:1]
      New connections: $flatten\divC.$4\temp[5:0] [0] = $auto$wreduce.cc:461:run$1323 [0]
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$862:
      Old ports: A={ $flatten\divC.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1322 [0] }, B=$auto$wreduce.cc:461:run$1322 [5:0], Y={ $flatten\divC.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1323 [0] }
      New ports: A=$flatten\divC.$2\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1322 [5:1], Y=$flatten\divC.$3\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1323 [0] = $auto$wreduce.cc:461:run$1322 [0]
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$865:
      Old ports: A={ 3'000 $auto$rtlil.cc:2416:ReduceOr$1511 }, B={ 2'00 $auto$wreduce.cc:461:run$1319 [1:0] }, Y=$flatten\divC.$2\dec_tens[3:0]
      New ports: A={ 1'0 $auto$rtlil.cc:2416:ReduceOr$1511 }, B=$auto$wreduce.cc:461:run$1319 [1:0], Y=$flatten\divC.$2\dec_tens[3:0] [1:0]
      New connections: $flatten\divC.$2\dec_tens[3:0] [3:2] = 2'00
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$868:
      Old ports: A={ $flatten\divC.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1321 [0] }, B=$auto$wreduce.cc:461:run$1321 [5:0], Y={ $flatten\divC.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1322 [0] }
      New ports: A=$flatten\divC.$1\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1321 [5:1], Y=$flatten\divC.$2\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1322 [0] = $auto$wreduce.cc:461:run$1321 [0]
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$874:
      Old ports: A=\Comparador_i5.CompUnsigned_i1.a, B={ $auto$wreduce.cc:461:run$1320 [5:1] \Comparador_i5.CompUnsigned_i1.a [0] }, Y={ $flatten\divC.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1321 [0] }
      New ports: A=\Comparador_i5.CompUnsigned_i1.a [5:1], B=$auto$wreduce.cc:461:run$1320 [5:1], Y=$flatten\divC.$1\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1321 [0] = \Comparador_i5.CompUnsigned_i1.a [0]
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$844:
      Old ports: A=$flatten\divD.$5\temp[5:0] [3:0], B={ $flatten\divD.$sub$top.v:208$469_Y [3:1] $flatten\divD.$5\temp[5:0] [0] }, Y=\divD.dec_ones
      New ports: A=$flatten\divD.$5\temp[5:0] [3:1], B=$flatten\divD.$sub$top.v:208$469_Y [3:1], Y=\divD.dec_ones [3:1]
      New connections: \divD.dec_ones [0] = $flatten\divD.$5\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$850:
      Old ports: A=$flatten\divD.$4\temp[5:0], B={ $flatten\divD.$sub$top.v:208$466_Y [5:1] $flatten\divD.$4\temp[5:0] [0] }, Y=$flatten\divD.$5\temp[5:0]
      New ports: A=$flatten\divD.$4\temp[5:0] [5:1], B=$flatten\divD.$sub$top.v:208$466_Y [5:1], Y=$flatten\divD.$5\temp[5:0] [5:1]
      New connections: $flatten\divD.$5\temp[5:0] [0] = $flatten\divD.$4\temp[5:0] [0]
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$856:
      Old ports: A={ $flatten\divD.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1329 [0] }, B=$auto$wreduce.cc:461:run$1329 [5:0], Y=$flatten\divD.$4\temp[5:0]
      New ports: A=$flatten\divD.$3\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1329 [5:1], Y=$flatten\divD.$4\temp[5:0] [5:1]
      New connections: $flatten\divD.$4\temp[5:0] [0] = $auto$wreduce.cc:461:run$1329 [0]
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$862:
      Old ports: A={ $flatten\divD.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1328 [0] }, B=$auto$wreduce.cc:461:run$1328 [5:0], Y={ $flatten\divD.$3\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1329 [0] }
      New ports: A=$flatten\divD.$2\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1328 [5:1], Y=$flatten\divD.$3\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1329 [0] = $auto$wreduce.cc:461:run$1328 [0]
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$865:
      Old ports: A={ 3'000 $auto$rtlil.cc:2416:ReduceOr$1457 }, B={ 2'00 $auto$wreduce.cc:461:run$1325 [1:0] }, Y=$flatten\divD.$2\dec_tens[3:0]
      New ports: A={ 1'0 $auto$rtlil.cc:2416:ReduceOr$1457 }, B=$auto$wreduce.cc:461:run$1325 [1:0], Y=$flatten\divD.$2\dec_tens[3:0] [1:0]
      New connections: $flatten\divD.$2\dec_tens[3:0] [3:2] = 2'00
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$868:
      Old ports: A={ $flatten\divD.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1327 [0] }, B=$auto$wreduce.cc:461:run$1327 [5:0], Y={ $flatten\divD.$2\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1328 [0] }
      New ports: A=$flatten\divD.$1\temp[5:0] [5:1], B=$auto$wreduce.cc:461:run$1327 [5:1], Y=$flatten\divD.$2\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1328 [0] = $auto$wreduce.cc:461:run$1327 [0]
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$874:
      Old ports: A=\Comparador_i5.CompUnsigned_i1.b, B={ $auto$wreduce.cc:461:run$1326 [5:1] \Comparador_i5.CompUnsigned_i1.b [0] }, Y={ $flatten\divD.$1\temp[5:0] [5:1] $auto$wreduce.cc:461:run$1327 [0] }
      New ports: A=\Comparador_i5.CompUnsigned_i1.b [5:1], B=$auto$wreduce.cc:461:run$1326 [5:1], Y=$flatten\divD.$1\temp[5:0] [5:1]
      New connections: $auto$wreduce.cc:461:run$1327 [0] = \Comparador_i5.CompUnsigned_i1.b [0]
  Optimizing cells in module \top.
Performed a total of 28 changes.

2.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.6. Executing OPT_DFF pass (perform DFF optimizations).

2.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.9. Rerunning OPT passes. (Maybe there is more to do..)

2.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $flatten\divA.$procmux$859:
      Old ports: A={ 2'00 $flatten\divA.$2\dec_tens[3:0] [1:0] }, B=$flatten\divA.$add$top.v:209$461_Y, Y=$flatten\divA.$3\dec_tens[3:0]
      New ports: A={ 1'0 $flatten\divA.$2\dec_tens[3:0] [1:0] }, B=$flatten\divA.$add$top.v:209$461_Y [2:0], Y=$flatten\divA.$3\dec_tens[3:0] [2:0]
      New connections: $flatten\divA.$3\dec_tens[3:0] [3] = 1'0
    Consolidated identical input bits for $mux cell $flatten\divB.$procmux$859:
      Old ports: A={ 2'00 $flatten\divB.$2\dec_tens[3:0] [1:0] }, B=$flatten\divB.$add$top.v:209$461_Y, Y=$flatten\divB.$3\dec_tens[3:0]
      New ports: A={ 1'0 $flatten\divB.$2\dec_tens[3:0] [1:0] }, B=$flatten\divB.$add$top.v:209$461_Y [2:0], Y=$flatten\divB.$3\dec_tens[3:0] [2:0]
      New connections: $flatten\divB.$3\dec_tens[3:0] [3] = 1'0
    Consolidated identical input bits for $mux cell $flatten\divC.$procmux$859:
      Old ports: A={ 2'00 $flatten\divC.$2\dec_tens[3:0] [1:0] }, B=$flatten\divC.$add$top.v:209$461_Y, Y=$flatten\divC.$3\dec_tens[3:0]
      New ports: A={ 1'0 $flatten\divC.$2\dec_tens[3:0] [1:0] }, B=$flatten\divC.$add$top.v:209$461_Y [2:0], Y=$flatten\divC.$3\dec_tens[3:0] [2:0]
      New connections: $flatten\divC.$3\dec_tens[3:0] [3] = 1'0
    Consolidated identical input bits for $mux cell $flatten\divD.$procmux$859:
      Old ports: A={ 2'00 $flatten\divD.$2\dec_tens[3:0] [1:0] }, B=$flatten\divD.$add$top.v:209$461_Y, Y=$flatten\divD.$3\dec_tens[3:0]
      New ports: A={ 1'0 $flatten\divD.$2\dec_tens[3:0] [1:0] }, B=$flatten\divD.$add$top.v:209$461_Y [2:0], Y=$flatten\divD.$3\dec_tens[3:0] [2:0]
      New connections: $flatten\divD.$3\dec_tens[3:0] [3] = 1'0
  Optimizing cells in module \top.
Performed a total of 4 changes.

2.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.13. Executing OPT_DFF pass (perform DFF optimizations).

2.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.

2.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.16. Rerunning OPT passes. (Maybe there is more to do..)

2.30.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.30.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.30.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.20. Executing OPT_DFF pass (perform DFF optimizations).

2.30.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.30.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.23. Finished OPT passes. (There is nothing left to do.)

2.31. Executing ICE40_WRAPCARRY pass (wrap carries).

2.32. Executing TECHMAP pass (map to technology primitives).

2.32.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.32.2. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $not.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $lut.
Using extmapper maccmap for cells of type $macc.
  add \Contador_i2.DIG_Counter_Nbit_i2.count (6 bits, unsigned)
  add \Contador_i2.DIG_Counter_Nbit_i1.count (6 bits, unsigned)
  sub \Contador_i2.DIG_Counter_Nbit_i3.count (6 bits, unsigned)
  sub \Contador_i2.DIG_Counter_Nbit_i0.count (6 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
Using template $paramod$1d1e68f77481583066c6d429218f48ea9d5739b3\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
  add \Contador_i3.DIG_Counter_Nbit_i2.count (6 bits, unsigned)
  add \Contador_i3.DIG_Counter_Nbit_i1.count (6 bits, unsigned)
  sub \Contador_i3.DIG_Counter_Nbit_i3.count (6 bits, unsigned)
  sub \Contador_i3.DIG_Counter_Nbit_i0.count (6 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
Using template $paramod$0563fff2c395e9892f21c131fa33d5e0ad144e72\_80_ice40_alu for cells of type $alu.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_80_ice40_alu for cells of type $alu.
  add \Contador_i0.DIG_Counter_Nbit_i2.count (6 bits, unsigned)
  add \Contador_i0.DIG_Counter_Nbit_i1.count (6 bits, unsigned)
  sub \Contador_i0.DIG_Counter_Nbit_i3.count (6 bits, unsigned)
  sub \Contador_i0.DIG_Counter_Nbit_i0.count (6 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
  add \Contador_i1.DIG_Counter_Nbit_i2.count (6 bits, unsigned)
  add \Contador_i1.DIG_Counter_Nbit_i1.count (6 bits, unsigned)
  sub \Contador_i1.DIG_Counter_Nbit_i3.count (6 bits, unsigned)
  sub \Contador_i1.DIG_Counter_Nbit_i0.count (6 bits, unsigned)
  packed 2 (1) bits / 1 words into adder tree
Using extmapper simplemap for cells of type $mux.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$18205a5da979f93ffab44671dcc4a48cf14e25e2\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$8b1a36ab2238111d2a0f4cb4ef2e14f2a55fc1f9\_80_ice40_alu for cells of type $alu.
Using template $paramod$5bb6c3f3e4a5303115f41a182fad517280ea0b25\_80_ice40_alu for cells of type $alu.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_80_ice40_alu for cells of type $alu.
Using template $paramod$6e7a9bf0df4543b400b3807e82a9e64e7923f280\_90_pmux for cells of type $pmux.
Using template $paramod$74da475822a2f68de79ce17b8391cc13bf96a18d\_90_pmux for cells of type $pmux.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_80_ice40_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_80_ice40_alu for cells of type $alu.
Using template $paramod$79aa992f2eb7f354d4aaf651790713cf239111fa\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000110 for cells of type $fa.
No more expansions possible.

2.33. Executing OPT pass (performing simple optimizations).

2.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 564 cells.

2.33.3. Executing OPT_DFF pass (perform DFF optimizations).

2.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 282 unused cells and 2867 unused wires.

2.33.5. Finished fast OPT passes.

2.34. Executing ICE40_OPT pass (performing simple optimizations).

2.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1404.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1404.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1413.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1404.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1422.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1404.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1431.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1404.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1440.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1404.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1449.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1404.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1458.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1458.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1467.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1458.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1476.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1458.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1485.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1458.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1494.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1458.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1503.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1458.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1512.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1512.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1521.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1512.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1530.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1512.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1539.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1512.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1548.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1512.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1557.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1512.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1566.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1566.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1575.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1566.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1584.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1566.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1593.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1566.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1602.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1566.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1611.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1566.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1653.slice[0].carry: CO=\10_2_i4.DIG_Counter_Nbit_i0.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1656.slice[0].carry: CO=\Contador_i0.DIG_Counter_Nbit_i0.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1659.slice[0].carry: CO=\Contador_i0.DIG_Counter_Nbit_i1.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1662.slice[0].carry: CO=\Contador_i0.DIG_Counter_Nbit_i2.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1665.slice[0].carry: CO=\Contador_i0.DIG_Counter_Nbit_i3.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1668.slice[0].carry: CO=\divD.C1
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1668.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1668.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1671.slice[0].carry: CO=\divD.C0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1671.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1671.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1674.slice[0].carry: CO=\Contador_i1.DIG_Counter_Nbit_i0.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1677.slice[0].carry: CO=\Contador_i1.DIG_Counter_Nbit_i1.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1680.slice[0].carry: CO=\Contador_i1.DIG_Counter_Nbit_i2.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1683.slice[0].carry: CO=\Contador_i1.DIG_Counter_Nbit_i3.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1686.slice[0].carry: CO=\divC.C1
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1686.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1686.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1689.slice[0].carry: CO=\divC.C0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1689.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1689.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1692.slice[0].carry: CO=\Contador_i2.DIG_Counter_Nbit_i0.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1695.slice[0].carry: CO=\Contador_i2.DIG_Counter_Nbit_i1.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1698.slice[0].carry: CO=\Contador_i2.DIG_Counter_Nbit_i2.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1701.slice[0].carry: CO=\Contador_i2.DIG_Counter_Nbit_i3.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1704.slice[0].carry: CO=\divB.C1
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1704.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1704.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1707.slice[0].carry: CO=\divB.C0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1707.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1707.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1710.slice[0].carry: CO=\Contador_i3.DIG_Counter_Nbit_i0.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1713.slice[0].carry: CO=\Contador_i3.DIG_Counter_Nbit_i1.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1716.slice[0].carry: CO=\Contador_i3.DIG_Counter_Nbit_i2.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1719.slice[0].carry: CO=\Contador_i3.DIG_Counter_Nbit_i3.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1722.slice[0].carry: CO=\divA.C1
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1722.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1722.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1725.slice[0].carry: CO=\divA.C0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1725.slice[3].carry: CO=$auto$alumacc.cc:485:replace_alu$1725.C [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1728.slice[0].carry: CO=\clk1.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1734.slice[0].carry: CO=\clk3.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1737.slice[0].carry: CO=\debounce_Al.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1740.slice[0].carry: CO=\debounce_All.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1743.slice[0].carry: CO=\debounce_Ap.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1746.slice[0].carry: CO=\debounce_App.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1749.slice[0].carry: CO=\debounce_Bl.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1752.slice[0].carry: CO=\debounce_Bll.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1755.slice[0].carry: CO=\debounce_Bp.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1758.slice[0].carry: CO=\debounce_Bpp.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1761.slice[0].carry: CO=\debounce_Cl.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1764.slice[0].carry: CO=\debounce_Cll.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1767.slice[0].carry: CO=\debounce_Cp.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1770.slice[0].carry: CO=\debounce_Cpp.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1773.slice[0].carry: CO=\debounce_Dl.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1776.slice[0].carry: CO=\debounce_Dll.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1779.slice[0].carry: CO=\debounce_Dp.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1782.slice[0].carry: CO=\debounce_Dpp.count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1791.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1791.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1791.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1794.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1794.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1797.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1797.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1800.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i0.a [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1803.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1602.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1806.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1593.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1809.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1584.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1812.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1575.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1815.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1566.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1824.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1824.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1824.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1827.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1827.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1830.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1830.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1833.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i0.b [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1836.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1548.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1839.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1539.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1842.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1530.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1845.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1521.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1848.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1512.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1857.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1857.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1857.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1860.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1860.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1863.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1863.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1866.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i1.a [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1869.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1494.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1872.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1485.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1875.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1476.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1878.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1467.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1881.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1458.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1890.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1890.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1893.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1893.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1896.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1896.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1899.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i1.b [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1902.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1440.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1905.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1431.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1908.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1422.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1911.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1413.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1914.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$1404.B [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1941.slice[0].carry: CO=\divA.D0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1944.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i0.a [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1947.slice[0].carry: CO=\divB.D0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1950.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i0.b [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1953.slice[0].carry: CO=\divC.D0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1956.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i1.a [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1959.slice[0].carry: CO=\divD.D0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1962.slice[0].carry: CO=\Comparador_i5.CompUnsigned_i1.b [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1965.slice[0].carry: CO=\lcd_inst.counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2068.slice[0].carry: CO=$auto$opt_expr.cc:1942:replace_const_cells$2068.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2068.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2072.slice[0].carry: CO=$auto$opt_expr.cc:1942:replace_const_cells$2072.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2072.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2076.slice[0].carry: CO=$auto$opt_expr.cc:1942:replace_const_cells$2076.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2076.slice[2].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2080.slice[0].carry: CO=$auto$opt_expr.cc:1942:replace_const_cells$2080.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$opt_expr.cc:1942:replace_const_cells$2080.slice[2].carry: CO=1'0

2.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 20 cells.

2.34.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$3788 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [7], Q = \lcd_inst.dat [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3787 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [6], Q = \lcd_inst.dat [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3786 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [5], Q = \lcd_inst.dat [5], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3785 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [4], Q = \lcd_inst.dat [4], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3784 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [3], Q = \lcd_inst.dat [3], rval = 1'1).
Adding SRST signal on $auto$ff.cc:266:slice$3783 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [2], Q = \lcd_inst.dat [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3782 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [1], Q = \lcd_inst.dat [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3781 ($_DFFE_PP_) from module top (D = $flatten\lcd_inst.$procmux$977.Y_B [0], Q = \lcd_inst.dat [0], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3780 ($_DFF_P_) from module top (D = $flatten\lcd_inst.$procmux$878.Y_B [5], Q = \lcd_inst.next [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3779 ($_DFF_P_) from module top (D = $flatten\lcd_inst.$procmux$878.Y_B [4], Q = \lcd_inst.next [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3778 ($_DFF_P_) from module top (D = $flatten\lcd_inst.$procmux$878.Y_B [3], Q = \lcd_inst.next [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3777 ($_DFF_P_) from module top (D = $flatten\lcd_inst.$procmux$878.Y_B [2], Q = \lcd_inst.next [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3776 ($_DFF_P_) from module top (D = $flatten\lcd_inst.$procmux$878.Y_B [1], Q = \lcd_inst.next [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$3775 ($_DFF_P_) from module top (D = $flatten\lcd_inst.$procmux$878.Y_B [0], Q = \lcd_inst.next [0], rval = 1'0).

2.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 18 unused cells and 18 unused wires.

2.34.6. Rerunning OPT passes. (Removed registers in this run.)

2.34.7. Running ICE40 specific optimizations.

2.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.34.10. Executing OPT_DFF pass (perform DFF optimizations).

2.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.34.12. Finished OPT passes. (There is nothing left to do.)

2.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.36. Executing TECHMAP pass (map to technology primitives).

2.36.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.36.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
No more expansions possible.

2.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1653.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1656.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1659.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1662.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1665.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1668.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1668.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1671.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1671.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1674.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1677.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1680.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1683.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1686.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1686.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1689.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1689.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1692.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1695.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1698.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1701.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1704.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1704.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1707.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1707.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1710.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1713.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1716.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1719.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1722.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1722.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1725.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1725.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1728.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1734.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1737.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1740.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1743.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1746.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1749.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1752.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1755.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1758.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1761.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1764.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1767.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1770.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1773.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1776.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1779.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1782.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1791.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1791.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1794.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1797.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1800.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1803.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1806.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1809.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1812.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1815.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1824.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1824.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1827.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1830.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1833.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1836.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1839.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1842.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1845.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1848.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1857.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1857.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1860.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1863.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1866.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1869.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1872.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1875.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1878.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1881.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1890.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1890.slice[3].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1893.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1896.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1899.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1902.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1905.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1908.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1911.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1914.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1941.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1944.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1947.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1950.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1953.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1956.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1959.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1962.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$1965.slice[0].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2068.slice[0].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2068.slice[2].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2072.slice[0].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2072.slice[2].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2076.slice[0].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2076.slice[2].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2080.slice[0].carry ($lut).
Mapping top.$auto$opt_expr.cc:1942:replace_const_cells$2080.slice[2].carry ($lut).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 226 cells.

2.39.4. Executing OPT_DFF pass (perform DFF optimizations).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1922 unused wires.

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.10. Executing OPT_DFF pass (perform DFF optimizations).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1747 gates and 2257 wires to a netlist network with 508 inputs and 519 outputs.

2.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =     613.
ABC: Participating nodes from both networks       =    1559.
ABC: Participating nodes from the first network   =     729. (  79.76 % of nodes)
ABC: Participating nodes from the second network  =     830. (  90.81 % of nodes)
ABC: Node pairs (any polarity)                    =     729. (  79.76 % of names can be moved)
ABC: Node pairs (same polarity)                   =     634. (  69.37 % of names can be moved)
ABC: Total runtime =     0.06 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      913
ABC RESULTS:        internal signals:     1230
ABC RESULTS:           input signals:      508
ABC RESULTS:          output signals:      519
Removing temp directory.

2.42. Executing ICE40_WRAPCARRY pass (wrap carries).

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 218 unused cells and 1823 unused wires.

2.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:     1301
  1-LUT              191
  2-LUT              268
  3-LUT              592
  4-LUT              250
  with \SB_CARRY    (#0)  309
  with \SB_CARRY    (#1)  328

Eliminating LUTs.
Number of LUTs:     1301
  1-LUT              191
  2-LUT              268
  3-LUT              592
  4-LUT              250
  with \SB_CARRY    (#0)  309
  with \SB_CARRY    (#1)  328

Combining LUTs.
Number of LUTs:     1225
  1-LUT              171
  2-LUT              234
  3-LUT              532
  4-LUT              288
  with \SB_CARRY    (#0)  309
  with \SB_CARRY    (#1)  328

Eliminated 0 LUTs.
Combined 76 LUTs.

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/johan/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101001 for cells of type $lut.
Using template $paramod$4282def8dbd6df3d1248ad282c629bee684502c2\$lut for cells of type $lut.
Using template $paramod$19232694b104ec9f70ceb28797a5ac59e9b4cb1a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101000 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$89ce1067ddd7d1b862c35a14cf05e043d151c807\$lut for cells of type $lut.
Using template $paramod$50b99034fbf984a51c265442496081454147f31e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$4b2297966ddb718657b80566604f97685ffc0120\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000101 for cells of type $lut.
Using template $paramod$e3efc884845b6fe6d5156b97d368568d6488dc11\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001011 for cells of type $lut.
Using template $paramod$4685bd76b86e63a7673afc1b48c70bed06b8ddfb\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$88b20fc653908aab5d0e1a4e4d07b8412b532a9b\$lut for cells of type $lut.
Using template $paramod$4f8066b1ac1b63eb4f02643acff28e860271e033\$lut for cells of type $lut.
Using template $paramod$162eacaa56f6f80a5a27551a5f2071c174364807\$lut for cells of type $lut.
Using template $paramod$d7f4570f04f68175b1fa25c1bac92938027a2c96\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01111111 for cells of type $lut.
Using template $paramod$4e202178ae3659c57ec043e1daf63c038982b159\$lut for cells of type $lut.
Using template $paramod$fccccf8bb2add7667329c686feec7546eb9a3ae3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod$ef55f89c74d994c27b4ec4bac79af43e8b1d7e25\$lut for cells of type $lut.
Using template $paramod$fb5ee0bdef1c4e74aaf1fd8efae98b46a2f5e564\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$53ce561f80f32d4298a3beadc88b6c5c78293221\$lut for cells of type $lut.
Using template $paramod$a670b08a47dd8a34f954c50cd06e9996d77e8467\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod$332a399730bfc61adea04021a76b1c4e4030f37d\$lut for cells of type $lut.
Using template $paramod$94fe99eb0cccc38a187ae84f430ae8dd38e6620f\$lut for cells of type $lut.
Using template $paramod$c5b694ec89d7629b942ccf6a9be1d39e24f8edec\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod$4b8b17319f3ec8be2cfb9015a73d100de75b7cff\$lut for cells of type $lut.
Using template $paramod$986ef48dd69022da353b9244bee94fa6ac8df5c0\$lut for cells of type $lut.
Using template $paramod$9d707d218adbd63b6f9a0c79d7ee037306fb6296\$lut for cells of type $lut.
Using template $paramod$b4410865e8124402796f9dfbf73ef8d279fdbd08\$lut for cells of type $lut.
Using template $paramod$f3e1547c4b47e64c590e75cf09078b2507c8cc75\$lut for cells of type $lut.
Using template $paramod$de0cfbf042671e74ccda8afd309cd5db894ca1a6\$lut for cells of type $lut.
Using template $paramod$97f21fc6caedb01e3e413e66042b2fa0473d00e4\$lut for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
Using template $paramod$ad9afe568e97c0bb73618642f5dd77addc807716\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod$2d07c1a6c53c7b878509360922c4fa5ebedc3011\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$4cf5305612d86489c1a6171729557670bf08582e\$lut for cells of type $lut.
Using template $paramod$3204210736873ef5d53b95f3dbe4714b354f9351\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
Using template $paramod$0de052767abdccc3aefc818722bdc3c7850d25d6\$lut for cells of type $lut.
Using template $paramod$41326ad8644342a66dfb051d050f2b6fbf15015b\$lut for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod$5a621b016c894274d07edef48c49b401a15fd796\$lut for cells of type $lut.
Using template $paramod$e9c77024ca501b890c641f9c0b10e27242db8730\$lut for cells of type $lut.
Using template $paramod$e5759512db67494ff77fbdfc66dff4006376568f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$cde3aa23c1efa60a470cf0f0281347d6ba585afa\$lut for cells of type $lut.
Using template $paramod$c1a19a87ccbbb03d43a72335db63f692ddf82cc1\$lut for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod$1843b3c15f2447d117e2d5de9b00f791ef5f9fa3\$lut for cells of type $lut.
Using template $paramod$7e0277340d3f34d16bb7c3938d5c21ff955fcc9d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00111010 for cells of type $lut.
Using template $paramod$e49f6e3576ef1a6d2f58c54414dbb786af8cc869\$lut for cells of type $lut.
Using template $paramod$048d4aa2263b685fba6c6b0d38f6224df0dc3042\$lut for cells of type $lut.
Using template $paramod$a50be0e6fa3a01511bb234559cb74fb8bd3e2061\$lut for cells of type $lut.
Using template $paramod$044e8b1893c94f717651c5cd428e71c892566f52\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01100000 for cells of type $lut.
Using template $paramod$7f88ae8b0ca78f7b736f446522956805c49fb79f\$lut for cells of type $lut.
Using template $paramod$5cdc22d0bd3ca14398fe93d6a434826313da339f\$lut for cells of type $lut.
Using template $paramod$11ec7271d8e6e5aeaace08c13e4c601f10e31038\$lut for cells of type $lut.
Using template $paramod$51307cdec77060d17363ea3d60427c9afef1ddc2\$lut for cells of type $lut.
Using template $paramod$052ca015f1400ebf950f85d5f181f7a5865c336c\$lut for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod$71cb81cd7ec213b39129c5f3867d1aa22dffde1b\$lut for cells of type $lut.
Using template $paramod$04b674496422df8889c01c3744b94097628ccfbc\$lut for cells of type $lut.
Using template $paramod$45d617c2ce0041e27b541f62b0fc3c3ce441a616\$lut for cells of type $lut.
Using template $paramod$bf60f6ec407ee294958b6566514fc3125ec42258\$lut for cells of type $lut.
Using template $paramod$8b24407096beec47292ddeb1567a058197a320b9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod$c8f07aef973f71b76e0c6a31237492b2778f5a58\$lut for cells of type $lut.
Using template $paramod$93f88d1396db449b71126dcb19be37c7227722f9\$lut for cells of type $lut.
Using template $paramod$c442da5e81cd0e0f799376d3a752fe4e79566a87\$lut for cells of type $lut.
Using template $paramod$a3cdc1eb771a2c6a16f64da161e11100ac409d2b\$lut for cells of type $lut.
Using template $paramod$015fc3095230f89b14bdd5bee7e178c58b9033d2\$lut for cells of type $lut.
Using template $paramod$e02d61ad9a3ad4925334337a4a48bbc76de57755\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod$1defcde2651b9293b25dc8313a52210a02d52398\$lut for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$4031bbff09fc2704dec279c73d8ecd7f801c10b3\$lut for cells of type $lut.
Using template $paramod$ad823946862e656cf7f96d606b18b8f972dc6d6c\$lut for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 2646 unused wires.

2.46. Executing AUTONAME pass.
Renamed 35971 objects in module top (70 iterations).

2.47. Executing HIERARCHY pass (managing design hierarchy).

2.47.1. Analyzing design hierarchy..
Top module:  \top

2.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.48. Printing statistics.

=== top ===

   Number of wires:               1129
   Number of wire bits:           4123
   Number of public wires:        1129
   Number of public wire bits:    4123
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1934
     SB_CARRY                      447
     SB_DFF                         18
     SB_DFFE                       133
     SB_DFFESR                      55
     SB_DFFESS                       3
     SB_DFFSR                       53
     SB_LUT4                      1225

2.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.50. Executing JSON backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 655892a8a8, CPU: user 1.82s system 0.02s, MEM: 45.23 MB peak
Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/johan/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 24% 25x opt_expr (0 sec), 16% 1x abc (0 sec), ...
